<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Visual Studio 2022进行项目发行/打包</title>
    <link href="/post/text12-project-2.html"/>
    <url>/post/text12-project-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="使用Visual-Studio-2022进行项目发行-打包"><a href="#使用Visual-Studio-2022进行项目发行-打包" class="headerlink" title="使用Visual Studio 2022进行项目发行&#x2F;打包"></a>使用Visual Studio 2022进行项目发行&#x2F;打包</h1><p>亟待完善</p>]]></content>
    
    
    <categories>
      
      <category>项目开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>备忘录</tag>
      
      <tag>项目开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 编辑器常用操作命令合集</title>
    <link href="/post/text11-linux-2-vim.html"/>
    <url>/post/text11-linux-2-vim.html</url>
    
    <content type="html"><![CDATA[<h1 id="vim-编辑器常用操作命令合集"><a href="#vim-编辑器常用操作命令合集" class="headerlink" title="vim 编辑器常用操作命令合集"></a>vim 编辑器常用操作命令合集</h1><p>本文只给出基础常用命令，详细命令与使用方法，参考知乎文章vim命令全集：<a href="https://zhuanlan.zhihu.com/p/61515833">链接</a>。</p><h2 id="vim-编辑模式"><a href="#vim-编辑模式" class="headerlink" title="vim 编辑模式"></a>vim 编辑模式</h2><p>vim 分为三种模式：<br>1.命令模式：默认进入<br>2.输入模式：输入 i 等<br>3.底线命令模式：输入 :<br><img src="/img/text/text11/1.png" alt="这是第1张图片QwQ"></p><h2 id="本文只给出常用基本操作如下"><a href="#本文只给出常用基本操作如下" class="headerlink" title="本文只给出常用基本操作如下"></a>本文只给出常用基本操作如下</h2><h3 id="1-进入输入模式（命令模式下操作）"><a href="#1-进入输入模式（命令模式下操作）" class="headerlink" title="1.进入输入模式（命令模式下操作）"></a>1.进入输入模式（命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">i:  在当前光标的前面插入字符a:  在当前光标的后面追加字符esc:  退出输入模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-光标移动与页面滚动（命令模式下操作）"><a href="#2-光标移动与页面滚动（命令模式下操作）" class="headerlink" title="2.光标移动与页面滚动（命令模式下操作）"></a>2.光标移动与页面滚动（命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">单个字符移动：h:  向左移动l:  向右移动j:  向下移动k:  向上移动xh:  向左移动x个字符距离滚屏与跳转半屏滚动:  ctrl+u&#x2F;ctrl+d全屏滚动:  ctrl+f&#x2F;ctrl+b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-常用编辑操作（命令模式下操作）"><a href="#3-常用编辑操作（命令模式下操作）" class="headerlink" title="3.常用编辑操作（命令模式下操作）"></a>3.常用编辑操作（命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">y:  复制yy:  复制一整行p:  粘贴~:  修改光标下字符的大小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-撤销操作（命令模式下操作）"><a href="#4-撤销操作（命令模式下操作）" class="headerlink" title="4.撤销操作（命令模式下操作）"></a>4.撤销操作（命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">u:  撤销ctrl + r:  反向撤销<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="5-其他常用操作（底线命令模式下操作）"><a href="#5-其他常用操作（底线命令模式下操作）" class="headerlink" title="5.其他常用操作（底线命令模式下操作）"></a>5.其他常用操作（底线命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;查找内容:  查找（n向下查找，N向上查找）创建一个折叠    zf200G:将光标和200行之间的代码折叠起来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-保存与退出操作（底线命令模式下操作）"><a href="#6-保存与退出操作（底线命令模式下操作）" class="headerlink" title="6.保存与退出操作（底线命令模式下操作）"></a>6.保存与退出操作（底线命令模式下操作）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">:q  若文件没有修改，直接退出:q!  文件已经被修改，放弃修改退出:wq  文件已经被修改，保存修改并退出:e!  放弃修改，重新回到文件打开时的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Linux操作系统</tag>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用操作命令合集</title>
    <link href="/post/text10-linux-1-basicorder.html"/>
    <url>/post/text10-linux-1-basicorder.html</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-常用操作命令合集"><a href="#Linux-常用操作命令合集" class="headerlink" title="Linux 常用操作命令合集"></a>Linux 常用操作命令合集</h1><p>注:本文转载自此CSDN文章：<a href="https://blog.csdn.net/m0_46422300/article/details/104645072">原文链接</a>，有删改，若有侵权请联系删除。</p><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-1-Linux系统的文件结构"><a href="#1-1-Linux系统的文件结构" class="headerlink" title="1.1 Linux系统的文件结构"></a>1.1 Linux系统的文件结构</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;bin        二进制文件，系统常规命令&#x2F;boot       系统启动分区，系统启动时读取的文件&#x2F;dev        设备文件&#x2F;etc        大多数配置文件&#x2F;home       普通用户的家目录&#x2F;lib        32位函数库&#x2F;lib64      64位库&#x2F;media      手动临时挂载点&#x2F;mnt        手动临时挂载点&#x2F;opt        第三方软件安装位置&#x2F;proc       进程信息及硬件信息&#x2F;root       临时设备的默认挂载点&#x2F;sbin       系统管理命令&#x2F;srv        数据&#x2F;var        数据&#x2F;sys        内核相关信息&#x2F;tmp        临时文件&#x2F;usr        用户相关设定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-2-Linux系统命令行的含义"><a href="#1-2-Linux系统命令行的含义" class="headerlink" title="1.2 Linux系统命令行的含义"></a>1.2 Linux系统命令行的含义</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">示例：root@app00:~# root    &#x2F;&#x2F;用户名，root为超级用户@       &#x2F;&#x2F;分隔符app00   &#x2F;&#x2F;主机名称~       &#x2F;&#x2F;当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:&#x2F;bin# ，当前位置在bin目录下）#       &#x2F;&#x2F;表示当前用户是超级用户，普通用户为$，例如：（&quot;yao@app00:&#x2F;root$&quot; ，表示使用用户&quot;yao&quot;访问&#x2F;root文件夹）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-3-命令的组成"><a href="#1-3-命令的组成" class="headerlink" title="1.3 命令的组成"></a>1.3 命令的组成</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">示例：命令 参数名 参数值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h2><h3 id="2-1-关闭系统"><a href="#2-1-关闭系统" class="headerlink" title="2.1 关闭系统"></a>2.1 关闭系统</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1)立刻关机  shutdown -h now 或者 poweroff(2)两分钟后关机  shutdown -h 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-关闭重启"><a href="#2-2-关闭重启" class="headerlink" title="2.2 关闭重启"></a>2.2 关闭重启</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1)立刻重启  shutdown -r now 或者 reboot(2)两分钟后重启  shutdown -r 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-3-帮助命令（help）"><a href="#2-3-帮助命令（help）" class="headerlink" title="2.3 帮助命令（help）"></a>2.3 帮助命令（help）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ifconfig  --help     &#x2F;&#x2F;查看 ifconfig 命令的用法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="2-4-命令说明书（man）"><a href="#2-4-命令说明书（man）" class="headerlink" title="2.4 命令说明书（man）"></a>2.4 命令说明书（man）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">man shutdown         &#x2F;&#x2F;打开命令说明后，可按&quot;q&quot;键退出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="2-5-切换用户（su）"><a href="#2-5-切换用户（su）" class="headerlink" title="2.5 切换用户（su）"></a>2.5 切换用户（su）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">su yao               &#x2F;&#x2F;切换为用户&quot;yao&quot;,输入后回车需要输入该用户的密码exit                 &#x2F;&#x2F;退出当前用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="三、目录操作"><a href="#三、目录操作" class="headerlink" title="三、目录操作"></a>三、目录操作</h2><h3 id="3-1-切换目录（cd）"><a href="#3-1-切换目录（cd）" class="headerlink" title="3.1 切换目录（cd）"></a>3.1 切换目录（cd）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;                 &#x2F;&#x2F;切换到根目录cd &#x2F;bin              &#x2F;&#x2F;切换到根目录下的bin目录cd ..&#x2F;               &#x2F;&#x2F;切换到上一级目录 或者使用命令：cd ..cd ~                 &#x2F;&#x2F;切换到home目录cd -                 &#x2F;&#x2F;切换到上次访问的目录cd xx(文件夹名)       &#x2F;&#x2F;切换到本目录下的名为xx的文件目录，如果目录不存在报错cd &#x2F;xxx&#x2F;xx&#x2F;x         &#x2F;&#x2F;可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-2-查看目录（ls）"><a href="#3-2-查看目录（ls）" class="headerlink" title="3.2 查看目录（ls）"></a>3.2 查看目录（ls）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ls                   &#x2F;&#x2F;查看当前目录下的所有目录和文件ls -a                &#x2F;&#x2F;查看当前目录下的所有目录和文件（包括隐藏的文件）ls -l                &#x2F;&#x2F;列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令&quot;ll&quot;效果一样ls &#x2F;bin              &#x2F;&#x2F;查看指定目录下的所有目录和文件 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-3-创建目录（mkdir）"><a href="#3-3-创建目录（mkdir）" class="headerlink" title="3.3 创建目录（mkdir）"></a>3.3 创建目录（mkdir）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mkdir tools          &#x2F;&#x2F;在当前目录下创建一个名为tools的目录mkdir &#x2F;bin&#x2F;tools     &#x2F;&#x2F;在指定目录下创建一个名为tools的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="3-4-修改目录（mv）"><a href="#3-4-修改目录（mv）" class="headerlink" title="3.4 修改目录（mv）"></a>3.4 修改目录（mv）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mv 当前目录名 新目录名        &#x2F;&#x2F;修改目录名，同样适用与文件操作mv &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt       &#x2F;&#x2F;将&#x2F;usr&#x2F;tmp目录下的tool目录剪切到 &#x2F;opt目录下面mv -r &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt    &#x2F;&#x2F;递归剪切目录中所有文件和文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-5-拷贝目录（cp）"><a href="#3-5-拷贝目录（cp）" class="headerlink" title="3.5 拷贝目录（cp）"></a>3.5 拷贝目录（cp）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt       &#x2F;&#x2F;将&#x2F;usr&#x2F;tmp目录下的tool目录复制到 &#x2F;opt目录下面cp -r &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt    &#x2F;&#x2F;递归剪复制目录中所有文件和文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="3-6-搜索目录（find）"><a href="#3-6-搜索目录（find）" class="headerlink" title="3.6 搜索目录（find）"></a>3.6 搜索目录（find）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">find &#x2F;bin -name &#39;a*&#39;        &#x2F;&#x2F;查找&#x2F;bin目录下的所有以a开头的文件或者目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="3-7-删除目录与文件（rm）"><a href="#3-7-删除目录与文件（rm）" class="headerlink" title="3.7 删除目录与文件（rm）"></a>3.7 删除目录与文件（rm）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">rm 文件名              &#x2F;&#x2F;删除当前目录下的文件rm -f 文件名           &#x2F;&#x2F;删除当前目录的的文件（不询问）rm -r 文件夹名         &#x2F;&#x2F;递归删除当前目录下此名的目录rm -rf 文件夹名        &#x2F;&#x2F;递归删除当前目录下此名的目录（不询问）rm -rf *              &#x2F;&#x2F;将当前目录下的所有目录和文件全部删除rm -rf &#x2F;*             &#x2F;&#x2F;将根目录下的所有文件全部删除【慎用！相当于格式化系统】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四、文件操作"><a href="#四、文件操作" class="headerlink" title="四、文件操作"></a>四、文件操作</h2><h3 id="4-1-新增文件（touch）"><a href="#4-1-新增文件（touch）" class="headerlink" title="4.1 新增文件（touch）"></a>4.1 新增文件（touch）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">touch  a.txt         &#x2F;&#x2F;在当前目录下创建名为a的txt文件（文件不存在），如果文件存在，将文件时间属性修改为当前系统时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="4-2-删除文件（rm）"><a href="#4-2-删除文件（rm）" class="headerlink" title="4.2 删除文件（rm）"></a>4.2 删除文件（rm）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">rm 文件名              &#x2F;&#x2F;删除当前目录下的文件rm -f 文件名           &#x2F;&#x2F;删除当前目录的的文件（不询问）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="4-3-查看文件"><a href="#4-3-查看文件" class="headerlink" title="4.3 查看文件"></a>4.3 查看文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cat a.txt          &#x2F;&#x2F;查看文件最后一屏内容less a.txt         &#x2F;&#x2F;PgUp向上翻页，PgDn向下翻页，&quot;q&quot;退出查看more a.txt         &#x2F;&#x2F;显示百分比，回车查看下一行，空格查看下一页，&quot;q&quot;退出查看tail -100 a.txt    &#x2F;&#x2F;查看文件的后100行，&quot;Ctrl+C&quot;退出查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="五、文件权限"><a href="#五、文件权限" class="headerlink" title="五、文件权限"></a>五、文件权限</h2><h3 id="5-1-权限说明"><a href="#5-1-权限说明" class="headerlink" title="5.1 权限说明"></a>5.1 权限说明</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">文件权限简介：&#39;r&#39; 代表可读（4），&#39;w&#39; 代表可写（2），&#39;x&#39; 代表执行权限（1），括号内代表&quot;8421法&quot;##文件权限信息示例：-rwxrw-r---第一位：&#39;-&#39;就代表是文件，&#39;d&#39;代表是文件夹-第一组三位：拥有者的权限-第二组三位：拥有者所在的组，组员的权限-第三组三位：代表的是其他用户的权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-2-文件权限"><a href="#5-2-文件权限" class="headerlink" title="5.2 文件权限"></a>5.2 文件权限</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">普通授权    chmod +x a.txt    8421法     chmod 777 a.txt     &#x2F;&#x2F;1+2+4&#x3D;7，&quot;7&quot;说明授予所有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="六、打包与解压"><a href="#六、打包与解压" class="headerlink" title="六、打包与解压"></a>六、打包与解压</h2><h3 id="6-1-说明"><a href="#6-1-说明" class="headerlink" title="6.1 说明"></a>6.1 说明</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.zip、.rar        &#x2F;&#x2F;windows系统中压缩文件的扩展名.tar              &#x2F;&#x2F;Linux中打包文件的扩展名.gz               &#x2F;&#x2F;Linux中压缩文件的扩展名.tar.gz           &#x2F;&#x2F;Linux中打包并压缩文件的扩展名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-2-打包文件"><a href="#6-2-打包文件" class="headerlink" title="6.2 打包文件"></a>6.2 打包文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -zcvf 打包压缩后的文件名 要打包的文件参数说明：z：调用gzip压缩命令进行压缩; c：打包文件; v：显示运行过程; f：指定文件名;示例：tar -zcvf a.tar file1 file2,...      &#x2F;&#x2F;多个文件压缩打包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-3-解压文件"><a href="#6-3-解压文件" class="headerlink" title="6.3 解压文件"></a>6.3 解压文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">tar -zxvf a.tar                      &#x2F;&#x2F;解包至当前目录tar -zxvf a.tar -C &#x2F;usr------        &#x2F;&#x2F;指定解压的位置unzip test.zip             &#x2F;&#x2F;解压*.zip文件 unzip -l test.zip          &#x2F;&#x2F;查看*.zip文件的内容 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="七、其他常用命令"><a href="#七、其他常用命令" class="headerlink" title="七、其他常用命令"></a>七、其他常用命令</h2><h3 id="7-1find"><a href="#7-1find" class="headerlink" title="7.1find"></a>7.1find</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">find . -name &quot;*.c&quot;     &#x2F;&#x2F;将目前目录及其子目录下所有延伸档名是 c 的文件列出来find . -type f         &#x2F;&#x2F;将目前目录其其下子目录中所有一般文件列出find . -ctime -20      &#x2F;&#x2F;将目前目录及其子目录下所有最近 20 天内更新过的文件列出find &#x2F;var&#x2F;log -type f -mtime +7 -ok rm &#123;&#125; \;     &#x2F;&#x2F;查找&#x2F;var&#x2F;log目录中更改时间在7日以前的普通文件，并在删除之前询问它们find . -type f -perm 644 -exec ls -l &#123;&#125; \;       &#x2F;&#x2F;查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件find &#x2F; -type f -size 0 -exec ls -l &#123;&#125; \;         &#x2F;&#x2F;为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-2-whereis"><a href="#7-2-whereis" class="headerlink" title="7.2 whereis"></a>7.2 whereis</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">whereis ls             &#x2F;&#x2F;将和ls文件相关的文件都查找出来<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="7-3-which"><a href="#7-3-which" class="headerlink" title="7.3 which"></a>7.3 which</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：which指令会在环境变量$PATH设置的目录里查找符合条件的文件。which bash             &#x2F;&#x2F;查看指令&quot;bash&quot;的绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-4-sudo"><a href="#7-4-sudo" class="headerlink" title="7.4 sudo"></a>7.4 sudo</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。需要输入自己账户密码。使用权限：在 &#x2F;etc&#x2F;sudoers 中有出现的使用者sudo -l                              &#x2F;&#x2F;列出目前的权限$ sudo -u yao vi ~www&#x2F;index.html    &#x2F;&#x2F;以 yao 用户身份编辑  home 目录下www目录中的 index.html 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-5-grep"><a href="#7-5-grep" class="headerlink" title="7.5 grep"></a>7.5 grep</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">grep -i &quot;the&quot; demo_file              &#x2F;&#x2F;在文件中查找字符串(不区分大小写)grep -A 3 -i &quot;example&quot; demo_text     &#x2F;&#x2F;输出成功匹配的行，以及该行之后的三行grep -r &quot;ramesh&quot; *                   &#x2F;&#x2F;在一个文件夹中递归查询包含指定字符串的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-6-service"><a href="#7-6-service" class="headerlink" title="7.6 service"></a>7.6 service</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：service命令用于运行System V init脚本，这些脚本一般位于&#x2F;etc&#x2F;init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径service ssh status      &#x2F;&#x2F;查看服务状态 service --status-all    &#x2F;&#x2F;查看所有服务状态 service ssh restart     &#x2F;&#x2F;重启服务 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-7-free"><a href="#7-7-free" class="headerlink" title="7.7 free"></a>7.7 free</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况 free -g            &#x2F;&#x2F;以G为单位输出内存的使用量，-g为GB，-m为MB，-k为KB，-b为字节 free -t            &#x2F;&#x2F;查看所有内存的汇总<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-8-top"><a href="#7-8-top" class="headerlink" title="7.8 top"></a>7.8 top</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">top               &#x2F;&#x2F;显示当前系统中占用资源最多的一些进程, shift+m 按照内存大小查看<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="7-9-df"><a href="#7-9-df" class="headerlink" title="7.9 df"></a>7.9 df</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：显示文件系统的磁盘使用情况df -h            &#x2F;&#x2F;一种易看的显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-10-mount"><a href="#7-10-mount" class="headerlink" title="7.10 mount"></a>7.10 mount</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mount &#x2F;dev&#x2F;sdb1 &#x2F;u01              &#x2F;&#x2F;挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上dev&#x2F;sdb1 &#x2F;u01 ext2 defaults 0 2   &#x2F;&#x2F;添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-11-uname"><a href="#7-11-uname" class="headerlink" title="7.11 uname"></a>7.11 uname</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息 uname -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-12-apt-Ubuntu-yum-CentOS"><a href="#7-12-apt-Ubuntu-yum-CentOS" class="headerlink" title="7.12 apt(Ubuntu)&#x2F;yum(CentOS)"></a>7.12 apt(Ubuntu)&#x2F;yum(CentOS)</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：安装插件命令apt&#x2F;yum install httpd      &#x2F;&#x2F;使用yum安装apache apt&#x2F;yum update httpd       &#x2F;&#x2F;更新apache apt&#x2F;yum remove httpd       &#x2F;&#x2F;卸载&#x2F;删除apache <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-13-rpm"><a href="#7-13-rpm" class="headerlink" title="7.13 rpm"></a>7.13 rpm</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：插件安装命令rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm      &#x2F;&#x2F;使用rpm文件安装apache rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm      &#x2F;&#x2F;使用rpm更新apache rpm -ev httpd                                 &#x2F;&#x2F;卸载&#x2F;删除apache <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-14-date"><a href="#7-14-date" class="headerlink" title="7.14 date"></a>7.14 date</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">date -s &quot;01&#x2F;31&#x2F;2010 23:59:53&quot;   &#x2F;&#x2F;&#x2F;设置系统时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="7-15-wget"><a href="#7-15-wget" class="headerlink" title="7.15 wget"></a>7.15 wget</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">说明：使用wget从网上下载软件、音乐、视频 示例：wget http:&#x2F;&#x2F;prdownloads.sourceforge.net&#x2F;sourceforge&#x2F;nagios&#x2F;nagios-3.2.1.tar.gz&#x2F;&#x2F;下载文件并以指定的文件名保存文件wget -O nagios.tar.gz http:&#x2F;&#x2F;prdownloads.sourceforge.net&#x2F;sourceforge&#x2F;nagios&#x2F;nagios-3.2.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-16-ftp"><a href="#7-16-ftp" class="headerlink" title="7.16 ftp"></a>7.16 ftp</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ftp IP&#x2F;hostname    &#x2F;&#x2F;访问ftp服务器mls *.html -       &#x2F;&#x2F;显示远程主机上文件列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-17-scp"><a href="#7-17-scp" class="headerlink" title="7.17 scp"></a>7.17 scp</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scp &#x2F;opt&#x2F;data.txt  192.168.1.101:&#x2F;opt&#x2F;    &#x2F;&#x2F;将本地opt目录下的data文件发送到192.168.1.101服务器的opt目录下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="八、系统管理"><a href="#八、系统管理" class="headerlink" title="八、系统管理"></a>八、系统管理</h2><h3 id="8-1-防火墙操作"><a href="#8-1-防火墙操作" class="headerlink" title="8.1 防火墙操作"></a>8.1 防火墙操作</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">service iptables status      &#x2F;&#x2F;查看iptables服务的状态service iptables start       &#x2F;&#x2F;开启iptables服务service iptables stop        &#x2F;&#x2F;停止iptables服务service iptables restart     &#x2F;&#x2F;重启iptables服务chkconfig iptables off       &#x2F;&#x2F;关闭iptables服务的开机自启动chkconfig iptables on        &#x2F;&#x2F;开启iptables服务的开机自启动##centos7 防火墙操作systemctl status firewalld.service     &#x2F;&#x2F;查看防火墙状态systemctl stop firewalld.service       &#x2F;&#x2F;关闭运行的防火墙systemctl disable firewalld.service    &#x2F;&#x2F;永久禁止防火墙服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-2修改主机名（CentOS-7）"><a href="#8-2修改主机名（CentOS-7）" class="headerlink" title="8.2修改主机名（CentOS 7）"></a>8.2修改主机名（CentOS 7）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hostnamectl set-hostname 主机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="8-3-查看网络"><a href="#8-3-查看网络" class="headerlink" title="8.3 查看网络"></a>8.3 查看网络</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="8-4-修改IP"><a href="#8-4-修改IP" class="headerlink" title="8.4 修改IP"></a>8.4 修改IP</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">修改网络配置文件，文件地址：&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0------------------------------------------------主要修改以下配置：  TYPE&#x3D;Ethernet               &#x2F;&#x2F;网络类型BOOTPROTO&#x3D;static            &#x2F;&#x2F;静态IPDEVICE&#x3D;ens00                &#x2F;&#x2F;网卡名IPADDR&#x3D;192.168.1.100        &#x2F;&#x2F;设置的IPNETMASK&#x3D;255.255.255.0       &#x2F;&#x2F;子网掩码GATEWAY&#x3D;192.168.1.1         &#x2F;&#x2F;网关DNS1&#x3D;192.168.1.1            &#x2F;&#x2F;DNSDNS2&#x3D;8.8.8.8                &#x2F;&#x2F;备用DNSONBOOT&#x3D;yes                  &#x2F;&#x2F;系统启动时启动此设置-------------------------------------------------修改保存以后使用命令重启网卡：service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-5-配置映射"><a href="#8-5-配置映射" class="headerlink" title="8.5 配置映射"></a>8.5 配置映射</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">修改文件： vi &#x2F;etc&#x2F;hosts在文件最后添加映射地址，示例如下： 192.168.1.101  node1 192.168.1.102  node2 192.168.1.103  node3配置好以后保存退出，输入命令：ping node1 ，可见实际 ping 的是 192.168.1.101。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-6-查看进程"><a href="#8-6-查看进程" class="headerlink" title="8.6 查看进程"></a>8.6 查看进程</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ps -ef         &#x2F;&#x2F;查看所有正在运行的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="8-7-结束进程"><a href="#8-7-结束进程" class="headerlink" title="8.7 结束进程"></a>8.7 结束进程</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">kill pid       &#x2F;&#x2F;杀死该pid的进程kill -9 pid    &#x2F;&#x2F;强制杀死该进程   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="8-8-查看链接"><a href="#8-8-查看链接" class="headerlink" title="8.8 查看链接"></a>8.8 查看链接</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ping IP        &#x2F;&#x2F;查看与此IP地址的连接情况netstat -an    &#x2F;&#x2F;查看当前系统端口netstat -an | grep 8080     &#x2F;&#x2F;查看指定端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-9-快速清屏"><a href="#8-9-快速清屏" class="headerlink" title="8.9 快速清屏"></a>8.9 快速清屏</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ctrl+l        &#x2F;&#x2F;清屏，往上翻可以查看历史操作clear         &#x2F;&#x2F;清屏，不可以查看历史操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="8-10-远程主机"><a href="#8-10-远程主机" class="headerlink" title="8.10 远程主机"></a>8.10 远程主机</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ssh IP       &#x2F;&#x2F;远程主机，需要输入用户名和密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Linux操作系统</tag>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目开发记录1 — 长整数处理</title>
    <link href="/post/text9-project-1.html"/>
    <url>/post/text9-project-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="项目开发记录1-—-长整数处理"><a href="#项目开发记录1-—-长整数处理" class="headerlink" title="项目开发记录1 — 长整数处理"></a>项目开发记录1 — 长整数处理</h1><h2 id="1、程序结构设计"><a href="#1、程序结构设计" class="headerlink" title="1、程序结构设计"></a>1、程序结构设计</h2><p><img src="/img/text/text9/9-1.png" alt="这是第1张图片QwQ"></p><h2 id="2、主要函数功能实现"><a href="#2、主要函数功能实现" class="headerlink" title="2、主要函数功能实现"></a>2、主要函数功能实现</h2><h3 id="1-除法"><a href="#1-除法" class="headerlink" title="(1)除法"></a>(1)除法</h3><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>核心逻辑：从高位依次除以除数，分别存储结果与余数，余数乘10进位与下一位相加，再循环执行上述操作<br>下图给出了一个长整数除以int整形数据的简单示例<br><img src="/img/text/text9/9-2.png" alt="这是第2张图片QwQ"></p><h4 id="核心代码（仅给出计算第一个数据进制转换的示例的部分代码）"><a href="#核心代码（仅给出计算第一个数据进制转换的示例的部分代码）" class="headerlink" title="核心代码（仅给出计算第一个数据进制转换的示例的部分代码）"></a>核心代码（仅给出计算第一个数据进制转换的示例的部分代码）</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">numa[0] &#x3D; strlen(s1);&#x2F;&#x2F;储存余数使用for (i &#x3D; strlen(s1) - 1; i &gt;&#x3D; 0; i--)numa[i + 1] &#x3D; s1[strlen(s1) - 1 - i] - &#39;0&#39;;for (i &#x3D; strlen(s1); i &gt;&#x3D; 1; i--) &#123;numa[0] &#x3D; numa[i] % num;&#x2F;&#x2F;存储余数numa[i] &#x3D; numa[i] &#x2F; num;&#x2F;&#x2F;存储结果if (i !&#x3D; 1) &#123;numa[i - 1] &#x3D; 10 * numa[0] + numa[i - 1];&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-进制转换"><a href="#2-进制转换" class="headerlink" title="(2)进制转换"></a>(2)进制转换</h3><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><p>核心逻辑：除2&#x2F;8&#x2F;16取余，倒序输出（转16进制时需要对10 - 15转换成对应大写字母输出%c字符型）<br>下图给出了将一个十进制数据转换为八进制的简单示例<br><img src="/img/text/text9/9-3.png" alt="这是第3张图片QwQ"></p><h4 id="核心代码（仅给出计算第一个数据进制转换的示例的部分代码）-1"><a href="#核心代码（仅给出计算第一个数据进制转换的示例的部分代码）-1" class="headerlink" title="核心代码（仅给出计算第一个数据进制转换的示例的部分代码）"></a>核心代码（仅给出计算第一个数据进制转换的示例的部分代码）</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">void TNS(char s1[], char s2[], int target) &#123;while (1) &#123;Divide(s01, s02, target);result_1[m] &#x3D; numa[0];m++;i &#x3D; strlen(s01);while (numa[i] &#x3D;&#x3D; 0) &#123;if (i &#x3D;&#x3D; 1) &#123;break;&#125;i--;&#125;j &#x3D; 0;for (; i &gt;&#x3D; 1; i--) &#123;s01[j] &#x3D; numa[i] + &#39;0&#39;;if (i !&#x3D; 1) &#123;j++;&#125;&#125;s01[j + 1] &#x3D; &#39;\0&#39;;if (j &#x3D;&#x3D; 0 &amp;&amp; s01[0] &#x3D;&#x3D; &#39;0&#39;) &#123;break;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="16进制字母替换代码"><a href="#16进制字母替换代码" class="headerlink" title="16进制字母替换代码"></a>16进制字母替换代码</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">for (i &#x3D; 0; i &lt; m; i++) &#123;if (result_1[i] &gt; 9) &#123;res_ch1[i] &#x3D; result_1[i] % 10 + 65;&#125;else &#123;res_ch1[i] &#x3D; result_1[i] + &#39;0&#39;;&#125;&#125;for (i &#x3D; 0; i &lt; n; i++) &#123;if (result_2[i] &gt; 9) &#123;res_ch2[i] &#x3D; result_2[i] % 10 + 65;&#125;else &#123;res_ch2[i] &#x3D; result_2[i] + &#39;0&#39;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3、项目打包-发行为exe-安装包"><a href="#3、项目打包-发行为exe-安装包" class="headerlink" title="3、项目打包&#x2F;发行为exe&#x2F;安装包"></a>3、项目打包&#x2F;发行为exe&#x2F;安装包</h2><p>会另行在其他文章详细记录。</p>]]></content>
    
    
    <categories>
      
      <category>项目开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
      <tag>项目开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录6 — 习题3</title>
    <link href="/post/text8-cstudy-6.html"/>
    <url>/post/text8-cstudy-6.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题3-—-二维数组输出回型矩阵"><a href="#习题3-—-二维数组输出回型矩阵" class="headerlink" title="习题3 — 二维数组输出回型矩阵"></a>习题3 — 二维数组输出回型矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数n，按要求输出n∗n的回型矩阵</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一行，包含一个整数n<br>1&lt;&#x3D;n&lt;&#x3D;19</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出n行，每行包含n个正整数.</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 2 3 412 13 14 511 16 15 610 9 8 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><img src="/img/text/text8/1.png" alt="这是第1张图片QwQ"><br><img src="/img/text/text8/2.png" alt="这是第2张图片QwQ"><br><img src="/img/text/text8/3.png" alt="这是第3张图片QwQ"><br><img src="/img/text/text8/4.png" alt="这是第4张图片QwQ"><br><img src="/img/text/text8/5.png" alt="这是第5张图片QwQ"><br><img src="/img/text/text8/6.png" alt="这是第6张图片QwQ"></p><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main()&#123;    int n, i, j;    int a[20][20];    int data &#x3D; 1; &#x2F;&#x2F;数组数据    scanf(&quot;%d&quot;,&amp;n);    int up &#x3D; 0, down &#x3D; n-1, left &#x3D; 0, right &#x3D; n-1;    &#x2F;&#x2F;回型递增定义数组数据    while (data &lt;&#x3D; n*n) &#123;        for (i &#x3D; left; i &lt;&#x3D; right; i++) &#123;            a[up][i] &#x3D; data++;         &#125;        up++;        for (i &#x3D; up; i &lt;&#x3D; down; i++) &#123;            a[i][right] &#x3D; data++;         &#125;        right--;        for (i &#x3D; right; i &gt;&#x3D; left; i--) &#123;        a[down][i] &#x3D; data++;        &#125;        down--;        for (i &#x3D; down; i &gt;&#x3D; up; i--) &#123;            a[i][left] &#x3D; data++;         &#125;        left++;    &#125;    &#x2F;&#x2F;输出    for (i &#x3D; 0; i &lt; n; i++) &#123;        for (j &#x3D; 0; j &lt; n; j++) &#123;            printf(&quot;%4d&quot;,a[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录5 — 习题2</title>
    <link href="/post/text7-cstudy-5.html"/>
    <url>/post/text7-cstudy-5.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题2-—-冒牌排序过程输出（不输出重复部分）"><a href="#习题2-—-冒牌排序过程输出（不输出重复部分）" class="headerlink" title="习题2 — 冒牌排序过程输出（不输出重复部分）"></a>习题2 — 冒牌排序过程输出（不输出重复部分）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一组正整数，请你用冒泡排序的方式把这组数据从小到达排列，要求每经过一轮排序都要把当前数据的状态输出并且排序完成后立即停止循环。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个正整数n，表示这组数据的个数。<br>第二行输入n个正整数。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">849 38 65 97 76 13 27 49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出若干行，每行n个数，表示每经过一轮排序之后的数据(若输入数据有序，则无输出!!)。</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">38 49 65 76 13 27 49 9738 49 65 13 27 49 76 9738 49 13 27 49 65 76 9738 13 27 49 49 65 76 9713 27 38 49 49 65 76 97<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() &#123;int i, j, temp, n;scanf(&quot;%d&quot;, &amp;n);int flag &#x3D; 0;&#x2F;&#x2F;布尔标记值int a[1000];for (int m &#x3D; 0; m &lt; n; m++)&#123;scanf(&quot;%d&quot;, &amp;a[m]);getchar();&#125;for (i &#x3D; 0; i &lt; n - 1; i++) &#123;   &#x2F;&#x2F;1for (j &#x3D; 0; j &lt; n - 1; j++) &#123;   &#x2F;&#x2F;2if (a[j] &gt; a[j + 1]) &#123;flag &#x3D; 1;&#x2F;&#x2F;进行循环则改变布尔标记值，当顺序排好（a[j]&lt;a[j+1]）后不进行循环temp &#x3D; a[j];a[j] &#x3D; a[j + 1];a[j + 1] &#x3D; temp;&#125;&#125;if (!flag) &#123; break;   &#x2F;*循环1的break，判断标记值，若不为0，break退出循环1，输出结束*&#x2F;&#125;else &#123;flag &#x3D; 0;&#125;for (int k &#x3D; 0; k &lt; n; k++)printf(&quot;%d &quot;, a[k]);printf(&quot;\n&quot;);&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录4 — 链表3</title>
    <link href="/post/text6-cstudy-4.html"/>
    <url>/post/text6-cstudy-4.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表3-—-单链表结点删除"><a href="#链表3-—-单链表结点删除" class="headerlink" title="链表3 — 单链表结点删除"></a>链表3 — 单链表结点删除</h1><h2 id="局部代码详解"><a href="#局部代码详解" class="headerlink" title="局部代码详解"></a>局部代码详解</h2><p>目的：实现单链表数据为x的结点删除</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;删除结点函数void del(List *head,int x)&#123;    if (head &#x3D;&#x3D; NULL) &#123;        return;    &#125;     &#x2F;&#x2F;单独判断头结点，如果为x则删除    if (head-&gt;d &#x3D;&#x3D; x) &#123;        List *temp &#x3D; head;        head &#x3D; head-&gt;next;        free(temp);    &#x2F;&#x2F;删除结点（释放内存）    &#125;    &#x2F;&#x2F;定义结构体指针    List *p &#x3D; head;    &#x2F;&#x2F;头节点判断结束，顺序判断各结点是否需要删除    while (p-&gt;next !&#x3D; NULL) &#123;        if (p-&gt;next-&gt;d &#x3D;&#x3D; x) &#123;            List *temp &#x3D; p-&gt;next;    &#x2F;&#x2F;将需要删除的结点储存在结构体指针temp中            p-&gt;next &#x3D; p-&gt;next-&gt;next;   &#x2F;&#x2F;将指针移动到下一结点处            free(temp);    &#x2F;&#x2F;删除结点（释放内存）        &#125;else &#123;            p &#x3D; p-&gt;next;    &#x2F;&#x2F;不需要删除时，判断下一结点是否删除        &#125;    &#125;    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;&#x2F;&#x2F;定义结点typedef struct LinkList&#123;    int d;    struct LinkList *next;&#125; List;&#x2F;&#x2F;尾插法List *add_list(List *head, int data)&#123;    List *newnode &#x3D; (List *)malloc(sizeof(List));    newnode-&gt;d &#x3D; data;    newnode-&gt;next &#x3D; NULL;    if (head &#x3D;&#x3D;NULL) &#123;        head &#x3D; newnode;    &#125;else &#123;        List *pT &#x3D; head;        while (pT-&gt;next !&#x3D; NULL) &#123;            pT &#x3D; pT-&gt;next;        &#125;        pT-&gt;next &#x3D; newnode;    &#125;    return head;&#125;&#x2F;&#x2F;输出函数void output(List *head)&#123;    List *pT &#x3D; head;    while (pT !&#x3D; NULL) &#123;        printf(&quot;%d&quot;,pT-&gt;d);        printf(&quot; &quot;);        pT &#x3D; pT-&gt;next;    &#125;&#125;&#x2F;&#x2F;删除结点函数void del(List *head,int x)&#123;    if (head &#x3D;&#x3D; NULL) &#123;        return;    &#125;    if (head-&gt;d &#x3D;&#x3D; x) &#123;        List *temp &#x3D; head;        head &#x3D; head-&gt;next;        free(temp);    &#125;       List *p &#x3D; head;    while (p-&gt;next !&#x3D; NULL) &#123;        if (p-&gt;next-&gt;d &#x3D;&#x3D; x) &#123;            List *temp &#x3D; p-&gt;next;            p-&gt;next &#x3D; p-&gt;next-&gt;next;            free(temp);        &#125;else &#123;            p &#x3D; p-&gt;next;        &#125;    &#125;    return;&#125;int main() &#123;    int n,i,x;    List *head &#x3D; NULL;    scanf(&quot;%d&quot;,&amp;n);    getchar();    scanf(&quot;%d&quot;,&amp;x);    int a[n];    for (i&#x3D;0; i &lt; n; i++) &#123;        scanf(&quot;%d&quot;,&amp;a[i]);        getchar();    &#125;    for (i&#x3D;0; i &lt; n; i++) &#123;        head &#x3D; add_list(head, a[i]);    &#125;    del(head,x);   &#x2F;&#x2F;调用删除结点函数    output(head);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录3 — 链表2</title>
    <link href="/post/text5-cstudy-3.html"/>
    <url>/post/text5-cstudy-3.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表2-—-单链表尾插法详解"><a href="#链表2-—-单链表尾插法详解" class="headerlink" title="链表2 — 单链表尾插法详解"></a>链表2 — 单链表尾插法详解</h1><p>目的：实现创建新结点</p><p>尾插法图解如下<br><img src="/img/text/text5/text5.jpg" alt="图解"></p><p>代码实现如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;定义结点typedef struct LinkList&#123;int d;struct LinkList *next;&#125; List;&#x2F;&#x2F;尾插法List *add_List(List* Head, int data)&#123;List *newnode &#x3D; (List*)malloc(sizeof(List));   &#x2F;&#x2F;创建新结点newnode-&gt;d &#x3D; data;   &#x2F;&#x2F;结点赋值newnode-&gt;next &#x3D; NULL; if(Head &#x3D;&#x3D; NULL)&#123;Head &#x3D; newnode;&#125;else&#123;List *pT &#x3D; Head;while (pT-&gt;next !&#x3D; NULL)&#123;pT &#x3D; pT-&gt;next;&#125;pT-&gt;next &#x3D; newnode; &#x2F;&#x2F;注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next&#125;return Head;    &#x2F;&#x2F;返回头结点值&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录2 — 链表1</title>
    <link href="/post/text4-cstudy-2.html"/>
    <url>/post/text4-cstudy-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表1-—-单链表遍历输出"><a href="#链表1-—-单链表遍历输出" class="headerlink" title="链表1 — 单链表遍历输出"></a>链表1 — 单链表遍历输出</h1><p>目的：实现数组元素利用单链表的遍历输出</p><p>单链表的基本结构<br>单链表的结点插入的尾插法<br>单链表结点的遍历输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;&#x2F;&#x2F;定义结点typedef struct LinkList&#123;int d;struct LinkList *next;&#125; List;&#x2F;&#x2F;尾插法List *add_List(List* Head, int data)&#123;List *newnode &#x3D; (List*)malloc(sizeof(List));   &#x2F;&#x2F;创建新结点newnode-&gt;d &#x3D; data;   &#x2F;&#x2F;结点赋值newnode-&gt;next &#x3D; NULL; if(Head &#x3D;&#x3D; NULL)&#123;Head &#x3D; newnode;&#125;else&#123;List *pT &#x3D; Head;while (pT-&gt;next !&#x3D; NULL)&#123;pT &#x3D; pT-&gt;next;&#125;pT-&gt;next &#x3D; newnode; &#x2F;&#x2F;注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next&#125;return Head;    &#x2F;&#x2F;返回头结点值&#125;int main()&#123;int n,i,j;List *Head &#x3D; NULL;    &#x2F;&#x2F;定义头结点scanf(&quot;%d&quot;,&amp;n);int a[n];for(i &#x3D; 0; i &lt; n; i++)&#123;scanf(&quot;%d&quot;,&amp;a[i]);getchar();&#125;for(j &#x3D; 0; j &lt;n; j++)&#123;Head &#x3D; add_List(Head,a[j]);&#125;List *p &#x3D; Head;&#x2F;*定义指针指向Head头节点注意！！！必须在Head被变更后使用该语句*&#x2F;&#x2F;&#x2F;遍历输出while (p !&#x3D; NULL)&#123;printf(&quot;%d&quot;,p-&gt;d);printf(&quot; &quot;);p &#x3D; p-&gt;next;&#125;&#x2F;&#x2F;释放内存List *temp;while (Head !&#x3D; NULL) &#123;      temp &#x3D; Head;      Head &#x3D; Head-&gt;next;      free(temp);  &#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录1 — 习题1</title>
    <link href="/post/text3-cstudy-1.html"/>
    <url>/post/text3-cstudy-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="输出浮点数的个位数字"><a href="#输出浮点数的个位数字" class="headerlink" title="输出浮点数的个位数字"></a>输出浮点数的个位数字</h1><p>使用了c语言的&lt;math.h&gt;函数库<br>利用floor()函数向下取整计算</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main() &#123;    double n, mid_0, mid_1;    int n_last;    scanf(&quot;%lf&quot;,&amp;n);    mid_0 &#x3D; floor(n&#x2F;10);    mid_1 &#x3D; n - (10*mid_0);    n_last &#x3D; floor(mid_1);    printf(&quot;%d&quot;,n_last);       return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机摄像头拍摄灯笼偏色</title>
    <link href="/post/text2-lantern.html"/>
    <url>/post/text2-lantern.html</url>
    
    <content type="html"><![CDATA[<p>感觉手机摄像头拍夜晚灯笼偏色问题比较严重啊<br>还容易过曝<br><img src="/img/text/text2/2-1.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-2.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-3.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-4.jpg" alt="这是一张图片QwQ"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“坐和放宽”——Windows系统安装方案全指南</title>
    <link href="/post/text1-system-install.html"/>
    <url>/post/text1-system-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="观前提醒"><a href="#观前提醒" class="headerlink" title="观前提醒"></a>观前提醒</h2><p><strong>本文移植自酷安,部分文字有改动</strong><br>本文基本分为三大部分<br>风险提示区，正文部分，与文件链接部分<br>提示区提示风险<del>（撇清关系）</del>不想看的就跳过吧，文件链接放在文末，并且为大家提供了激活工具，需要的请自取</p><h2 id="长文警告"><a href="#长文警告" class="headerlink" title="长文警告"></a>长文警告</h2><p>本文讲介绍多种常见装机方法及操作过程，内容较多，可根据目录和提示选择性浏览，当然，如果你有兴趣可以全部看完<br>（本文无专业术语名词等，可以对小白安装系统起一定的指导作用）</p><h2 id="风险提示"><a href="#风险提示" class="headerlink" title="风险提示"></a>风险提示</h2><p>⚠️以下装机方案都有一定几率失败，且可能损坏您的电脑系统，请谨慎操作<br>⚠️以下操作可能会格式化您的硬盘或U盘，使数据被清除，请一定要做好备份<br>⚠️安装前尽量准备好网卡驱动，以防系统安装完成后无法联网<br>⚠️免责声明：按照本教程进行系统安装对电脑造成损坏或数据丢失的，本人概不负责</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>1.使用微软官方工具下载并安装<br>2.使用微软官方工具创建系统安装U盘<br>3.使用WinNT Setup安装<br>4.使用Dism++安装<br>5.使用pe安装（需要U盘）</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>方案1、3、4可直接运行安装进程<br>方案2、4可创建安装U盘（需要格式化）<br>⚠️需要注意的是，微软官方工具（即方案1、2）仅支持Win10和Win11的安装，且win10安装需要基于win7sp版本及以上的系统，win11安装则需要基于win10进行<br>（ps.个人认为第一种和第三种比较方便，且成功率比较高，意见仅供参考）<br><del>前摇过长（不是）</del></p><p><strong>下面正式开始教程</strong></p><h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><h3 id="1-使用微软官方工具下载并安装"><a href="#1-使用微软官方工具下载并安装" class="headerlink" title="1.使用微软官方工具下载并安装"></a>1.使用微软官方工具下载并安装</h3><p>由于两工具用法基本一致，这里以win10安装工具为例<br>首先同意用户协议<br>选择立即升级这台电脑，等待他下载完成<br><img src="/img/text/text1/1-1.png" alt="这是一张图片QwQ"><br>接下来只需一直按下一步和同意，直到提示你“准备就绪，可以安装”时，注意“更改要保留的应用”这一选项，点击后可以对其更改<br><img src="/img/text/text1/1-2.jpeg" alt="这是一张图片QwQ"><br>更改说明：选择下图中第一项会保留电脑的所有文件、应用及设置<br>选择第二项会清除设置项和应用，保留文件<br>选择第三项删库跑路(<br>无论选择哪个，还是建议先备好份，以防万一<br><img src="/img/text/text1/1-3.jpeg" alt="这是一张图片QwQ"><br>最后一路同意直到弹出全屏提示，接下来等待安装完成即可<br><img src="/img/text/text1/1-4.jpeg" alt="这是一张图片QwQ"></p><p>至此，第一种方案结束</p><h3 id="2-使用微软官方工具创建系统安装U盘"><a href="#2-使用微软官方工具创建系统安装U盘" class="headerlink" title="2.使用微软官方工具创建系统安装U盘"></a>2.使用微软官方工具创建系统安装U盘</h3><p>首先,你需要一个容量≥8G的U盘，必须注意的是，创建系统安装U盘会将其格式化，所以请一定做好备份！<br>打开下载好的工具，下载链接已经在上面给出，选择“创建安装介质”<br><img src="/img/text/text1/1-5.png" alt="这是一张图片QwQ"><br>选择系统版本，这里取消勾选为这台电脑使用合适的配置，可以自定义一些内容<br><img src="/img/text/text1/1-6.png" alt="这是一张图片QwQ"><br>弹出选择要使用的介质时，我们选择U盘，接下来选择你准备好的U盘，等待制作完成<br><img src="/img/text/text1/1-7.png" alt="这是一张图片QwQ"><br>制作完成后，你会发现U盘被重命名了，并多出一些文件，你仍然可以把格式化之前的文件放回U盘，安装时不会删除你U盘中的文件，制作完成后，U盘中的文件必须在U盘根目录下，不能放入文件夹中，否则不能安装系统<br><img src="/img/text/text1/1-8.png" alt="这是一张图片QwQ"><br>接下来，插入U盘，重启系统，进入boot界面，下面给出boot进入的方式，只需在开机时狂按对应键😵，直到boot界面出现，出现后，找到你的U盘，使用方向键选择并按下回车，等待安装进程启动<br>（注意：如果你使用台式电脑，在boot中识别不到U盘或无法正常进入安装，请将U盘插到机箱后面的USB接口，不要插到前面板或延长线上）<br><img src="/img/text/text1/1-9.jpeg" alt="这是一张图片QwQ"><br>接下来选择语言和输入法，点击下一步<br><img src="/img/text/text1/1-10.jpeg" alt="这是一张图片QwQ"><br>我们需要在这里选择“我没有产品密钥”<br><img src="/img/text/text1/1-11.jpeg" alt="这是一张图片QwQ"><br>选择你需要安装的Windows版本<br><img src="/img/text/text1/1-12.jpeg" alt="这是一张图片QwQ"><br>接着，你需要选则安装方式，需要注意的是，选择“升级”一项需要你的Windows版本低于U盘中安装文件的版本<br><img src="/img/text/text1/1-13.jpeg" alt="这是一张图片QwQ"><br>我们这里选择自定义安装，选择要把系统安装到哪一个磁盘，这里选择好以后，我们直接点击下一步<br><img src="/img/text/text1/1-14.jpeg" alt="这是一张图片QwQ"><br>如果弹出下图中的提示，点击确定，接下来等待安装完成即可<br><img src="/img/text/text1/1-15.jpeg" alt="这是一张图片QwQ"></p><p>至此，第二种方案结束</p><h3 id="3-使用WinNT-Setup安装"><a href="#3-使用WinNT-Setup安装" class="headerlink" title="3.使用WinNT Setup安装"></a>3.使用WinNT Setup安装</h3><p>（需要下载镜像文件）<br>首先打开下载好的exe文件，双击打开，如果提示“需要Windows10ADK的某些文件”点击下载即可，进入软件后，根据你要安装的系统版本，选择2000&#x2F;XP&#x2F;2003或Vista&#x2F;7&#x2F;8&#x2F;10&#x2F;11&#x2F;20xx<br>选好以后，选择镜像文件位置<br>（支持的镜像类型iso，wim，swm，esd）<br>接着选择你要将系统安装到哪一个硬盘<br>在版本一栏中，你可以选择你要安装的系统版本，做完这些后，你就可以开始安装了</p><p><strong>可选项</strong><br>此外，如果你需要使用第三方主题，可以在这里勾选“破解系统主题签名”，你还可以选择“优化调整”禁用一些无用的设置，请注意，可选项不是必须执行的<br><img src="/img/text/text1/1-16.jpeg" alt="这是一张图片QwQ"><br>接下来点击最下方的安装，弹出窗口中的选项无需改动，直接点击安装，等待镜像应用完成后，弹性出窗口提示重启，这时重启电脑<br>重启以后，我们会看到系统选择界面，在这里一般会自动选中我们要安装的系统，直接按回车进入安装界面，等待系统安装完成即可</p><p>至此，第三种方案结束</p><h3 id="4-使用Dism-安装系统"><a href="#4-使用Dism-安装系统" class="headerlink" title="4.使用Dism++安装系统"></a>4.使用Dism++安装系统</h3><p>（需要下载镜像文件）<br>为了避免一些大聪明（bushi）不会在Github下载的问题，这里说一下<br>进入文末提供的网站，点击箭头所指位置即可<br><img src="/img/text/text1/1-17.png" alt="这是一张图片QwQ"><br><img src="/img/text/text1/1-18.png" alt="这是一张图片QwQ"><br>接下来将下载好的压缩包解压，双击运行<br>进入软件后点击恢复功能，点击在RE中运行，然后电脑会自动重启并再次出现这个界面<br><img src="/img/text/text1/1-19.png" alt="这是一张图片QwQ"><br>重启后点击文件，点击释放镜像<br><img src="/img/text/text1/1-20.png" alt="这是一张图片QwQ"><br>接下来选择镜像位置，在目标映像中选择系统版本，选择系统安装的硬盘位置，注意一定要勾选添加引导和格式化，接下开等待进度条走完后，重启进入系统安装<br><img src="/img/text/text1/1-21.png" alt="这是一张图片QwQ"></p><p>至此，第四种方案结束</p><h3 id="5-使用pe安装"><a href="#5-使用pe安装" class="headerlink" title="5.使用pe安装"></a>5.使用pe安装</h3><p>（需要下载镜像文件）<br>科普：什么是PE系统<br>Windows PE，即Windows预安装环境用于安装、部署和修复Windows 操作系统，而PE并非为普通用户可以正常使用的操作系统，多数用于开发人员及维修主系统使用。<br>说人话就是不能拿来用，只能装系统(<br>pe系统有很多选择，这里推荐微PE工具箱，免费干净（现在贴主改用FirePE了），到官网下载时会弹出捐赠提示，其实不捐赠也可以下载，点击跳过捐赠即可，下载完成后打开，打开后选择安装PE到U盘<br> <img src="/img/text/text1/1-22.png" alt="这是一张图片QwQ"><br>接下来选择安装方法：选择方案一全能三分区<br>选择你准备好的U盘<br>勾选格式化，选择NTFS，USB-HDD一项不需要改动，接下来的U盘名程和PE壁纸可以自选，如果你的电脑是Legacy启动，那么请勾选包含DOS工具箱（查看启动方式的方法在下面图中给出），接下来点击安装，等待完成即可<br>图一：查看启动方式<br>图二：安装步骤<br> <img src="/img/text/text1/1-23.png" alt="这是一张图片QwQ"><br> <img src="/img/text/text1/1-24.png" alt="这是一张图片QwQ"><br>安装后发现U盘是空的并且容量凭空缩小了，其实是PE系统的分区被隐藏起来，能看到的部分可以作为U盘使用，正常存放文件<br> <img src="/img/text/text1/1-25.png" alt="这是一张图片QwQ"><br>接下来重启并插入U盘，进入boot（上文有教程），选择你的U盘，如果看不到U盘名称，那么选择USB-HDD<br> <img src="/img/text/text1/1-26.jpeg" alt="这是一张图片QwQ"><br>接下来直接按回车进入PE系统<br> <img src="/img/text/text1/1-27.jpeg" alt="这是一张图片QwQ"><br>箭头所指工具均可用来安装系统，绿色箭头所指在上文中教过，我们这里讲解蓝色箭头所指的Ghost<br> <img src="/img/text/text1/1-28.jpeg" alt="这是一张图片QwQ"><br>需要注意的是，使用Ghost安装只支持gho镜像，下载时请注意，先选择镜像位置，再选择系统版本，勾选还原系统和完成后重启，选择你要安装到的硬盘，接下来点击恢复选择的分区，等待系统安装完成即可<br> <img src="/img/text/text1/1-29.jpeg" alt="这是一张图片QwQ"></p><p>至此，五种安装方法案全部结束</p><h2 id="附录：所需文件的下载地址"><a href="#附录：所需文件的下载地址" class="headerlink" title="附录：所需文件的下载地址"></a>附录：所需文件的下载地址</h2><p>3、4、5方案所需镜像文件下载网站（MSDN）<br><a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a><br>（该网站只提供原版软件，不提供破解与激活服务）</p><p>方案1、2微软官方工具下载<br>Windows 10下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a><br>Windows 11下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p><p>方案3工具下载地址<br><a href="https://wwn.lanzouw.com/ir49x02cu9yd">https://wwn.lanzouw.com/ir49x02cu9yd</a><br>密码7240</p><p>方案4工具下载地址（Github）<br><a href="https://github.com/Chuyu-Team/Dism-Multi-language">https://github.com/Chuyu-Team/Dism-Multi-language</a></p><p>方案5工具下载地址<br><a href="https://www.wepe.com.cn/">https://www.wepe.com.cn/</a></p><p>需要激活工具的朋友到这里下载<br><a href="https://wwn.lanzouw.com/itbvZ02cuy5e">https://wwn.lanzouw.com/itbvZ02cuy5e</a><br>密码8w19</p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>（把酷安的结语稍微也改了改哈哈哈）<br>对于各位酷安大神和经常搞这些的发烧友来说，这篇教程可能水平不高，或者说根本没有水平😵写这篇文章的起因是网课期间陆续有三个同学找我给电脑装系统，说来之前也帮助过几名好友装系统，于是我当时就想写这么一篇文章来帮助新手和小白学会安装系统或者说激发一下对这方面的兴趣吧，高中网课抽时间写这玩意花了我前后三天想想也挺久的，不是建这网站还没翻出来这陈年旧贴呢哈哈哈。这文章在酷安挂了这么久应该多少也能帮到大家一些吧，那当初写这文章时间花的也挺值的，就写到这吧，估计也没啥人来看我的网站就是了，看了也不会评论罢（大概？）</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
