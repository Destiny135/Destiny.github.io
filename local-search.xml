<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言学习记录6 — 习题2</title>
    <link href="/post/text8-cstudy-5.html"/>
    <url>/post/text8-cstudy-5.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题2-—-二维数组输出回型矩阵"><a href="#习题2-—-二维数组输出回型矩阵" class="headerlink" title="习题2 — 二维数组输出回型矩阵"></a>习题2 — 二维数组输出回型矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数n，按要求输出n∗n的回型矩阵</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一行，包含一个整数n<br>1&lt;&#x3D;n&lt;&#x3D;19</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出n行，每行包含n个正整数.</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">16</span> <span class="hljs-number">15</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><img src="/img/text8/1.png" alt="这是第1张图片qwq"><br><img src="/img/text8/2.png" alt="这是第2张图片qwq"><br><img src="/img/text8/3.png" alt="这是第3张图片qwq"><br><img src="/img/text8/4.png" alt="这是第4张图片qwq"><br><img src="/img/text8/5.png" alt="这是第5张图片qwq"><br><img src="/img/text8/6.png" alt="这是第6张图片qwq"></p><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include &lt;stdio.h&gt;<br><br><span class="hljs-built_in">int</span> main()&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>, i, j;<br>    <span class="hljs-built_in">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">int</span> data = <span class="hljs-number">1</span>; //数组数据<br><br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">n</span>);<br><br>    <span class="hljs-built_in">int</span> up = <span class="hljs-number">0</span>, down = <span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>, <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>;<br><br>    //回型递增定义数组数据<br>    while (data &lt;= <span class="hljs-built_in">n</span>*<span class="hljs-built_in">n</span>) &#123;<br>        for (i = <span class="hljs-built_in">left</span>; i &lt;= <span class="hljs-built_in">right</span>; i++) &#123;<br>            a[up][i] = data++; <br>        &#125;<br>        up++;<br><br>        for (i = up; i &lt;= down; i++) &#123;<br>            a[i][<span class="hljs-built_in">right</span>] = data++; <br>        &#125;<br>        <span class="hljs-built_in">right</span>--;<br><br>        for (i = <span class="hljs-built_in">right</span>; i &gt;= <span class="hljs-built_in">left</span>; i--) &#123;<br>        a[down][i] = data++;<br>        &#125;<br>        down--;<br><br>        for (i = down; i &gt;= up; i--) &#123;<br>            a[i][<span class="hljs-built_in">left</span>] = data++; <br>        &#125;<br>        <span class="hljs-built_in">left</span>++;<br>    &#125;<br><br>    //输出<br>    for (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; i++) &#123;<br>        for (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">n</span>; j++) &#123;<br>            printf(<span class="hljs-string">&quot;%4d&quot;</span>,a[i][j]);<br>        &#125;<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录5 — 习题1</title>
    <link href="/post/text7-cstudy-4.html"/>
    <url>/post/text7-cstudy-4.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题1-—-冒牌排序过程输出（不输出重复部分）"><a href="#习题1-—-冒牌排序过程输出（不输出重复部分）" class="headerlink" title="习题1 — 冒牌排序过程输出（不输出重复部分）"></a>习题1 — 冒牌排序过程输出（不输出重复部分）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一组正整数，请你用冒泡排序的方式把这组数据从小到达排列，要求每经过一轮排序都要把当前数据的状态输出并且排序完成后立即停止循环。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个正整数n，表示这组数据的个数。<br>第二行输入n个正整数。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">49 </span><span class="hljs-number">38</span> <span class="hljs-number">65</span> <span class="hljs-number">97</span> <span class="hljs-number">76</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出若干行，每行n个数，表示每经过一轮排序之后的数据(若输入数据有序，则无输出!!)。</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">27</span> <span class="hljs-number">38</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br></code></pre></td></tr></table></figure><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> i, j, temp, n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-comment">//布尔标记值</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; n; m++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[m]);<br><span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;   <span class="hljs-comment">//1</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span>; j++) &#123;   <span class="hljs-comment">//2</span><br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//进行循环则改变布尔标记值，当顺序排好（a[j]&lt;a[j+1]）后不进行循环</span><br>temp = a[j];<br>a[j] = a[j + <span class="hljs-number">1</span>];<br>a[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!flag) &#123; <br><span class="hljs-keyword">break</span>;   <span class="hljs-comment">/*循环1的break，判断标记值，若不为0，break退出循环1，输出结束*/</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[k]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录4 — 链表3</title>
    <link href="/post/text6-cstudy-3.html"/>
    <url>/post/text6-cstudy-3.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表3-—-单链表结点删除"><a href="#链表3-—-单链表结点删除" class="headerlink" title="链表3 — 单链表结点删除"></a>链表3 — 单链表结点删除</h1><h2 id="局部代码详解"><a href="#局部代码详解" class="headerlink" title="局部代码详解"></a>局部代码详解</h2><p>目的：实现单链表数据为x的结点删除</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//删除结点函数</span><br>void del(List *head,int x)&#123;<br>    <span class="hljs-keyword">if</span> (head == NULL) &#123;<br>        return;<br>    &#125;<br>     <span class="hljs-comment">//单独判断头结点，如果为x则删除</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (head-&gt;</span>d == x) &#123;<br>        List *temp = head;<br>        <span class="hljs-function"><span class="hljs-title">head</span> = head-&gt;</span>next;<br>        free(temp);    <span class="hljs-comment">//删除结点（释放内存）</span><br>    &#125;<br>    <span class="hljs-comment">//定义结构体指针</span><br>    List *p = head;<br><br>    <span class="hljs-comment">//头节点判断结束，顺序判断各结点是否需要删除</span><br>    <span class="hljs-function"><span class="hljs-title">while</span> (p-&gt;</span>next != NULL) &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (p-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>d == x) &#123;<br>            L<span class="hljs-function"><span class="hljs-title">ist</span> *temp = p-&gt;</span>next;    <span class="hljs-comment">//将需要删除的结点储存在结构体指针temp中</span><br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = p-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>next;   <span class="hljs-comment">//将指针移动到下一结点处</span><br>            free(temp);    <span class="hljs-comment">//删除结点（释放内存）</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span> = p-&gt;</span>next;    <span class="hljs-comment">//不需要删除时，判断下一结点是否删除</span><br>        &#125;<br>    &#125;<br>    return;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span>&#123;<br>    <span class="hljs-type">int</span> d;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span> *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function">List *<span class="hljs-title">add_list</span><span class="hljs-params">(List *head, <span class="hljs-type">int</span> data)</span></span>&#123;<br>    List *newnode = (List *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(List));<br><br>    newnode-&gt;d = data;<br>    newnode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (head ==<span class="hljs-literal">NULL</span>) &#123;<br>        head = newnode;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        List *pT = head;<br>        <span class="hljs-keyword">while</span> (pT-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            pT = pT-&gt;next;<br>        &#125;<br>        pT-&gt;next = newnode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">//输出函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(List *head)</span></span>&#123;<br>    List *pT = head;<br>    <span class="hljs-keyword">while</span> (pT != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,pT-&gt;d);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        pT = pT-&gt;next;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//删除结点函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(List *head,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;d == x) &#123;<br>        List *temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br>   <br>    List *p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;next-&gt;d == x) &#123;<br>            List *temp = p-&gt;next;<br>            p-&gt;next = p-&gt;next-&gt;next;<br>            <span class="hljs-built_in">free</span>(temp);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            p = p-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,i,x;<br>    List *head = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-type">int</span> a[n];<br><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        head = <span class="hljs-built_in">add_list</span>(head, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">del</span>(head,x);   <span class="hljs-comment">//调用删除结点函数</span><br>    <span class="hljs-built_in">output</span>(head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录3 — 链表2</title>
    <link href="/post/text5-cstudy-2.html"/>
    <url>/post/text5-cstudy-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表2-—-单链表尾插法详解"><a href="#链表2-—-单链表尾插法详解" class="headerlink" title="链表2 — 单链表尾插法详解"></a>链表2 — 单链表尾插法详解</h1><p>目的：实现创建新结点</p><p>尾插法图解如下<br><img src="/img/text5/text5-0.jpg" alt="图解"></p><p>代码实现如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> struct LinkList&#123;<br>int d;<br>struct LinkList *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br>List *add_List(List* Head, int data)&#123;<br><br>List *<span class="hljs-keyword">new</span><span class="hljs-type">node</span> = (List*)malloc(sizeof(List));   <span class="hljs-comment">//创建新结点</span><br><br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;d = data;   <span class="hljs-comment">//结点赋值</span><br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = NULL; <br><br><br><span class="hljs-keyword">if</span>(Head == NULL)<br>&#123;<br>Head = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>List *pT = Head;<br><span class="hljs-keyword">while</span> (pT-&gt;next != NULL)<br>&#123;<br>pT = pT-&gt;next;<br>&#125;<br>pT-&gt;next = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>; <br><span class="hljs-comment">//注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next</span><br><br>&#125;<br><span class="hljs-keyword">return</span> Head;    <span class="hljs-comment">//返回头结点值</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录2 — 链表1</title>
    <link href="/post/text4-cstudy-1.html"/>
    <url>/post/text4-cstudy-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表1-—-单链表遍历输出"><a href="#链表1-—-单链表遍历输出" class="headerlink" title="链表1 — 单链表遍历输出"></a>链表1 — 单链表遍历输出</h1><p>目的：实现数组元素利用单链表的遍历输出</p><p>单链表的基本结构<br>单链表的结点插入的尾插法<br>单链表结点的遍历输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span>&#123;<br><span class="hljs-type">int</span> d;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span> *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function">List *<span class="hljs-title">add_List</span><span class="hljs-params">(List* Head, <span class="hljs-type">int</span> data)</span></span>&#123;<br><br>List *newnode = (List*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(List));   <span class="hljs-comment">//创建新结点</span><br><br>newnode-&gt;d = data;   <span class="hljs-comment">//结点赋值</span><br>newnode-&gt;next = <span class="hljs-literal">NULL</span>; <br><br><br><span class="hljs-keyword">if</span>(Head == <span class="hljs-literal">NULL</span>)<br>&#123;<br>Head = newnode;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>List *pT = Head;<br><span class="hljs-keyword">while</span> (pT-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>pT = pT-&gt;next;<br>&#125;<br>pT-&gt;next = newnode; <br><span class="hljs-comment">//注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next</span><br><br>&#125;<br><span class="hljs-keyword">return</span> Head;    <span class="hljs-comment">//返回头结点值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,i,j;<br>List *Head = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//定义头结点</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-type">int</span> a[n];<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">getchar</span>();<br>&#125;<br><br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt;n; j++)&#123;<br>Head = <span class="hljs-built_in">add_List</span>(Head,a[j]);<br>&#125;<br>List *p = Head;<br><span class="hljs-comment">/*定义指针指向Head头节点</span><br><span class="hljs-comment">注意！！！必须在Head被变更后使用该语句*/</span><br><br><span class="hljs-comment">//遍历输出</span><br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>p = p-&gt;next;<br>&#125;<br><br><span class="hljs-comment">//释放内存</span><br>List *temp;<br><span class="hljs-keyword">while</span> (Head != <span class="hljs-literal">NULL</span>) &#123;  <br>    temp = Head;  <br>    Head = Head-&gt;next;  <br>    <span class="hljs-built_in">free</span>(temp);  <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录1</title>
    <link href="/post/text3-cstudy-0.html"/>
    <url>/post/text3-cstudy-0.html</url>
    
    <content type="html"><![CDATA[<h1 id="输出浮点数的个位数字"><a href="#输出浮点数的个位数字" class="headerlink" title="输出浮点数的个位数字"></a>输出浮点数的个位数字</h1><p>使用了c语言的&lt;math.h&gt;函数库<br>利用floor()函数向下取整计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> n, mid_0, mid_1;<br>    <span class="hljs-type">int</span> n_last;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>    mid_0 = <span class="hljs-built_in">floor</span>(n/<span class="hljs-number">10</span>);<br>    mid_1 = n - (<span class="hljs-number">10</span>*mid_0);<br><br>    n_last = <span class="hljs-built_in">floor</span>(mid_1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,n_last);<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机摄像头拍摄灯笼偏色</title>
    <link href="/post/text2-lantern.html"/>
    <url>/post/text2-lantern.html</url>
    
    <content type="html"><![CDATA[<p>感觉手机摄像头拍夜晚灯笼偏色问题比较严重啊<br>还容易过曝<br><img src="/img/text2/2-1.jpg" alt="这是一张图片qwq"><br><img src="/img/text2/2-2.jpg" alt="这是一张图片qwq"><br><img src="/img/text2/2-3.jpg" alt="这是一张图片qwq"><br><img src="/img/text2/2-4.jpg" alt="这是一张图片qwq"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“坐和放宽”——Windows系统安装方案全指南</title>
    <link href="/post/text1-system-install.html"/>
    <url>/post/text1-system-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="观前提醒"><a href="#观前提醒" class="headerlink" title="观前提醒"></a>观前提醒</h2><p><strong>本文移植自酷安,部分文字有改动</strong><br>本文基本分为三大部分<br>风险提示区，正文部分，与文件链接部分<br>提示区提示风险<del>（撇清关系）</del>不想看的就跳过吧，文件链接放在文末，并且为大家提供了激活工具，需要的请自取</p><h2 id="长文警告"><a href="#长文警告" class="headerlink" title="长文警告"></a>长文警告</h2><p>本文讲介绍多种常见装机方法及操作过程，内容较多，可根据目录和提示选择性浏览，当然，如果你有兴趣可以全部看完<br>（本文无专业术语名词等，可以对小白安装系统起一定的指导作用）</p><h2 id="风险提示"><a href="#风险提示" class="headerlink" title="风险提示"></a>风险提示</h2><p>⚠️以下装机方案都有一定几率失败，且可能损坏您的电脑系统，请谨慎操作<br>⚠️以下操作可能会格式化您的硬盘或U盘，使数据被清除，请一定要做好备份<br>⚠️安装前尽量准备好网卡驱动，以防系统安装完成后无法联网<br>⚠️免责声明：按照本教程进行系统安装对电脑造成损坏或数据丢失的，本人概不负责</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>1.使用微软官方工具下载并安装<br>2.使用微软官方工具创建系统安装U盘<br>3.使用WinNT Setup安装<br>4.使用Dism++安装<br>5.使用pe安装（需要U盘）</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>方案1、3、4可直接运行安装进程<br>方案2、4可创建安装U盘（需要格式化）<br>⚠️需要注意的是，微软官方工具（即方案1、2）仅支持Win10和Win11的安装，且win10安装需要基于win7sp版本及以上的系统，win11安装则需要基于win10进行<br>（ps.个人认为第一种和第三种比较方便，且成功率比较高，意见仅供参考）<br><del>前摇过长（不是）</del></p><p><strong>下面正式开始教程</strong></p><h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><h3 id="1-使用微软官方工具下载并安装"><a href="#1-使用微软官方工具下载并安装" class="headerlink" title="1.使用微软官方工具下载并安装"></a>1.使用微软官方工具下载并安装</h3><p>由于两工具用法基本一致，这里以win10安装工具为例<br>首先同意用户协议<br>选择立即升级这台电脑，等待他下载完成<br><img src="/img/text1/1-1.png" alt="这是一张图片qwq"><br>接下来只需一直按下一步和同意，直到提示你“准备就绪，可以安装”时，注意“更改要保留的应用”这一选项，点击后可以对其更改<br><img src="/img/text1/1-2.jpeg" alt="这是一张图片qwq"><br>更改说明：选择下图中第一项会保留电脑的所有文件、应用及设置<br>选择第二项会清除设置项和应用，保留文件<br>选择第三项删库跑路(<br>无论选择哪个，还是建议先备好份，以防万一<br><img src="/img/text1/1-3.jpeg" alt="这是一张图片qwq"><br>最后一路同意直到弹出全屏提示，接下来等待安装完成即可<br><img src="/img/text1/1-4.jpeg" alt="这是一张图片qwq"></p><p>至此，第一种方案结束</p><h3 id="2-使用微软官方工具创建系统安装U盘"><a href="#2-使用微软官方工具创建系统安装U盘" class="headerlink" title="2.使用微软官方工具创建系统安装U盘"></a>2.使用微软官方工具创建系统安装U盘</h3><p>首先,你需要一个容量≥8G的U盘，必须注意的是，创建系统安装U盘会将其格式化，所以请一定做好备份！<br>打开下载好的工具，下载链接已经在上面给出，选择“创建安装介质”<br><img src="/img/text1/1-5.png" alt="这是一张图片qwq"><br>选择系统版本，这里取消勾选为这台电脑使用合适的配置，可以自定义一些内容<br><img src="/img/text1/1-6.png" alt="这是一张图片qwq"><br>弹出选择要使用的介质时，我们选择U盘，接下来选择你准备好的U盘，等待制作完成<br><img src="/img/text1/1-7.png" alt="这是一张图片qwq"><br>制作完成后，你会发现U盘被重命名了，并多出一些文件，你仍然可以把格式化之前的文件放回U盘，安装时不会删除你U盘中的文件，制作完成后，U盘中的文件必须在U盘根目录下，不能放入文件夹中，否则不能安装系统<br><img src="/img/text1/1-8.png" alt="这是一张图片qwq"><br>接下来，插入U盘，重启系统，进入boot界面，下面给出boot进入的方式，只需在开机时狂按对应键😵，直到boot界面出现，出现后，找到你的U盘，使用方向键选择并按下回车，等待安装进程启动<br>（注意：如果你使用台式电脑，在boot中识别不到U盘或无法正常进入安装，请将U盘插到机箱后面的USB接口，不要插到前面板或延长线上）<br><img src="/img/text1/1-9.jpeg" alt="这是一张图片qwq"><br>接下来选择语言和输入法，点击下一步<br><img src="/img/text1/1-10.jpeg" alt="这是一张图片qwq"><br>我们需要在这里选择“我没有产品密钥”<br><img src="/img/text1/1-11.jpeg" alt="这是一张图片qwq"><br>选择你需要安装的Windows版本<br><img src="/img/text1/1-12.jpeg" alt="这是一张图片qwq"><br>接着，你需要选则安装方式，需要注意的是，选择“升级”一项需要你的Windows版本低于U盘中安装文件的版本<br><img src="/img/text1/1-13.jpeg" alt="这是一张图片qwq"><br>我们这里选择自定义安装，选择要把系统安装到哪一个磁盘，这里选择好以后，我们直接点击下一步<br><img src="/img/text1/1-14.jpeg" alt="这是一张图片qwq"><br>如果弹出下图中的提示，点击确定，接下来等待安装完成即可<br><img src="/img/text1/1-15.jpeg" alt="这是一张图片qwq"></p><p>至此，第二种方案结束</p><h3 id="3-使用WinNT-Setup安装"><a href="#3-使用WinNT-Setup安装" class="headerlink" title="3.使用WinNT Setup安装"></a>3.使用WinNT Setup安装</h3><p>（需要下载镜像文件）<br>首先打开下载好的exe文件，双击打开，如果提示“需要Windows10ADK的某些文件”点击下载即可，进入软件后，根据你要安装的系统版本，选择2000&#x2F;XP&#x2F;2003或Vista&#x2F;7&#x2F;8&#x2F;10&#x2F;11&#x2F;20xx<br>选好以后，选择镜像文件位置<br>（支持的镜像类型iso，wim，swm，esd）<br>接着选择你要将系统安装到哪一个硬盘<br>在版本一栏中，你可以选择你要安装的系统版本，做完这些后，你就可以开始安装了</p><p><strong>可选项</strong><br>此外，如果你需要使用第三方主题，可以在这里勾选“破解系统主题签名”，你还可以选择“优化调整”禁用一些无用的设置，请注意，可选项不是必须执行的<br><img src="/img/text1/1-16.jpeg" alt="这是一张图片qwq"><br>接下来点击最下方的安装，弹出窗口中的选项无需改动，直接点击安装，等待镜像应用完成后，弹性出窗口提示重启，这时重启电脑<br>重启以后，我们会看到系统选择界面，在这里一般会自动选中我们要安装的系统，直接按回车进入安装界面，等待系统安装完成即可</p><p>至此，第三种方案结束</p><h3 id="4-使用Dism-安装系统"><a href="#4-使用Dism-安装系统" class="headerlink" title="4.使用Dism++安装系统"></a>4.使用Dism++安装系统</h3><p>（需要下载镜像文件）<br>为了避免一些大聪明（bushi[受虐滑稽]）不会在Github下载的问题，这里说一下<br>进入文末提供的网站，点击箭头所指位置即可<br><img src="/img/text1/1-17.png" alt="这是一张图片qwq"><br><img src="/img/text1/1-18.png" alt="这是一张图片qwq"><br>接下来将下载好的压缩包解压，双击运行<br>进入软件后点击恢复功能，点击在RE中运行，然后电脑会自动重启并再次出现这个界面<br><img src="/img/text1/1-19.png" alt="这是一张图片qwq"><br>重启后点击文件，点击释放镜像<br><img src="/img/text1/1-20.png" alt="这是一张图片qwq"><br>接下来选择镜像位置，在目标映像中选择系统版本，选择系统安装的硬盘位置，注意一定要勾选添加引导和格式化，接下开等待进度条走完后，重启进入系统安装<br><img src="/img/text1/1-21.png" alt="这是一张图片qwq"></p><p>至此，第四种方案结束</p><h3 id="5-使用pe安装"><a href="#5-使用pe安装" class="headerlink" title="5.使用pe安装"></a>5.使用pe安装</h3><p>（需要下载镜像文件）<br>科普：什么是PE系统<br>Windows PE，即Windows预安装环境用于安装、部署和修复Windows 操作系统，而PE并非为普通用户可以正常使用的操作系统，多数用于开发人员及维修主系统使用。<br>说人话就是不能拿来用，只能装系统(<br>pe系统有很多选择，这里推荐微PE工具箱，免费干净（现在贴主改用FirePE了），到官网下载时会弹出捐赠提示，其实不捐赠也可以下载，点击跳过捐赠即可，下载完成后打开，打开后选择安装PE到U盘<br> <img src="/img/text1/1-22.png" alt="这是一张图片qwq"><br>接下来选择安装方法：选择方案一全能三分区<br>选择你准备好的U盘<br>勾选格式化，选择NTFS，USB-HDD一项不需要改动，接下来的U盘名程和PE壁纸可以自选，如果你的电脑是Legacy启动，那么请勾选包含DOS工具箱（查看启动方式的方法在下面图中给出），接下来点击安装，等待完成即可<br>图一：查看启动方式<br>图二：安装步骤<br> <img src="/img/text1/1-23.png" alt="这是一张图片qwq"><br> <img src="/img/text1/1-24.png" alt="这是一张图片qwq"><br>安装后发现U盘是空的并且容量凭空缩小了，其实是PE系统的分区被隐藏起来，能看到的部分可以作为U盘使用，正常存放文件<br> <img src="/img/text1/1-25.png" alt="这是一张图片qwq"><br>接下来重启并插入U盘，进入boot（上文有教程），选择你的U盘，如果看不到U盘名称，那么选择USB-HDD<br> <img src="/img/text1/1-26.jpeg" alt="这是一张图片qwq"><br>接下来直接按回车进入PE系统<br> <img src="/img/text1/1-27.jpeg" alt="这是一张图片qwq"><br>箭头所指工具均可用来安装系统，绿色箭头所指在上文中教过，我们这里讲解蓝色箭头所指的Ghost<br> <img src="/img/text1/1-28.jpeg" alt="这是一张图片qwq"><br>需要注意的是，使用Ghost安装只支持gho镜像，下载时请注意，先选择镜像位置，再选择系统版本，勾选还原系统和完成后重启，选择你要安装到的硬盘，接下来点击恢复选择的分区，等待系统安装完成即可<br> <img src="/img/text1/1-29.jpeg" alt="这是一张图片qwq"></p><p>至此，五种安装方法案全部结束</p><h2 id="附录：所需文件的下载地址"><a href="#附录：所需文件的下载地址" class="headerlink" title="附录：所需文件的下载地址"></a>附录：所需文件的下载地址</h2><p>3、4、5方案所需镜像文件下载网站（MSDN）<br><a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a><br>（该网站只提供原版软件，不提供破解与激活服务）</p><p>方案1、2微软官方工具下载<br>Windows 10下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a><br>Windows 11下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p><p>方案3工具下载地址<br><a href="https://wwn.lanzouw.com/ir49x02cu9yd">https://wwn.lanzouw.com/ir49x02cu9yd</a><br>密码7240</p><p>方案4工具下载地址（Github）<br><a href="https://github.com/Chuyu-Team/Dism-Multi-language">https://github.com/Chuyu-Team/Dism-Multi-language</a></p><p>方案5工具下载地址<br><a href="https://www.wepe.com.cn/">https://www.wepe.com.cn/</a></p><p>需要激活工具的朋友到这里下载<br><a href="https://wwn.lanzouw.com/itbvZ02cuy5e">https://wwn.lanzouw.com/itbvZ02cuy5e</a><br>密码8w19</p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>（把酷安的结语稍微也改了改哈哈哈）<br>对于各位酷安大神和经常搞这些的发烧友来说，这篇教程可能水平不高，或者说根本没有水平😵写这篇文章的起因是网课期间陆续有三个同学找我给电脑装系统，说来之前也帮助过几名好友装系统，于是我当时就想写这么一篇文章来帮助新手和小白学会安装系统或者说激发一下对这方面的兴趣吧，高中网课抽时间写这玩意花了我前后三天想想也挺久的，不是建这网站还没翻出来这陈年旧贴呢哈哈哈。这文章在酷安挂了这么久应该多少也能帮到大家一些吧，那当初写这文章时间花的也挺值的，就写到这吧，估计也没啥人来看我的网站就是了，看了也不会评论罢（大概？）</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站正在完善中</title>
    <link href="/post/text0.html"/>
    <url>/post/text0.html</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章，网站预计于一周内全部完成</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
