<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>text13-project-3</title>
    <link href="/post/text13-project-3.html"/>
    <url>/post/text13-project-3.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Visual Studio 2022进行项目发行/打包</title>
    <link href="/post/text12-project-2.html"/>
    <url>/post/text12-project-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="使用Visual-Studio-2022进行项目发行-打包"><a href="#使用Visual-Studio-2022进行项目发行-打包" class="headerlink" title="使用Visual Studio 2022进行项目发行&#x2F;打包"></a>使用Visual Studio 2022进行项目发行&#x2F;打包</h1><h2 id="1-安装扩展"><a href="#1-安装扩展" class="headerlink" title="1.安装扩展"></a>1.安装扩展</h2><p>安装扩展Microsoft Visual Studio Installer Projects 2022</p><h2 id="2-制作安装包"><a href="#2-制作安装包" class="headerlink" title="2.制作安装包"></a>2.制作安装包</h2><p>2.1 右键要打包的项目的解决方案-&gt;添加-&gt;新建项目-&gt;选择setup Project。<br><img src="/img/text/text12/1.png" alt="这是第1张图片QwQ"><br><img src="/img/text/text12/2.png" alt="这是第2张图片QwQ"><br>2.2 为项目命名<br><img src="/img/text/text12/3.png" alt="这是第3张图片QwQ"><br>2.3  右键要打包的项目-&gt;在文件资源管理器中打开文件夹。<br><img src="/img/text/text12/4.png" alt="这是第4张图片QwQ"><br>2.4 复制打开的文件夹中的所有文件和文件夹并粘贴到Application Folder中。<br><img src="/img/text/text12/5.png" alt="这是第5张图片QwQ"><br><img src="/img/text/text12/6.png" alt="这是第6张图片QwQ"></p><h3 id="文件夹功能说明"><a href="#文件夹功能说明" class="headerlink" title="文件夹功能说明"></a>文件夹功能说明</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Application Folder：应用程序包含的文件设置。<br>Use<span class="hljs-string">r&#x27;s Desktop：用户桌面快捷方式设置。</span><br><span class="hljs-string">User&#x27;</span>s Programs Menu：用户启动菜单的快捷方式设置。<br></code></pre></td></tr></table></figure><p>2.5 设置项目主输出<br>选择Application Folder-&gt;点击add-&gt;项目输出-&gt;设置为主输出-&gt;确定（系统会自动生成主输出文件）。<br><img src="/img/text/text12/7.png" alt="这是第7张图片QwQ"><br><img src="/img/text/text12/8.png" alt="这是第8张图片QwQ"><br>2.6 设置快捷方式<br>右击新生成的主输出文件-&gt;Create Shortcut to主输出from test (Active)依赖项(E)-&gt;将其重命名-&gt;拖至User&#96;s Desktop文件夹<br><img src="/img/text/text12/9.png" alt="这是第9张图片QwQ"><br><img src="/img/text/text12/10.png" alt="这是第10张图片QwQ"><br>2.7 右击快捷方式文件-&gt;属性窗口-&gt;设置图标（icon）属性-&gt;点击Icon，选择Browse-&gt;点击Browse-&gt;双击Application Folder-&gt;点击Add File-&gt;选择.ico图标文件<br><img src="/img/text/text12/11.png" alt="这是第11张图片QwQ"><br><img src="/img/text/text12/12.png" alt="这是第12张图片QwQ"><br><img src="/img/text/text12/13.png" alt="这是第13张图片QwQ"><br><img src="/img/text/text12/14.png" alt="这是第14张图片QwQ"><br>2.8 右键setup Project项目，选择生成即可，生成成功或失败会有提示<br><img src="/img/text/text12/15.png" alt="这是第15张图片QwQ"><br>2.8 发行的exe&#x2F;msi安装程序储存在目标发行项目一期的同一目录下<br><img src="/img/text/text12/16.png" alt="这是第16张图片QwQ"><br><img src="/img/text/text12/17.png" alt="这是第17张图片QwQ"><br><img src="/img/text/text12/18.png" alt="这是第18张图片QwQ"></p>]]></content>
    
    
    <categories>
      
      <category>项目开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>项目开发</tag>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim 编辑器常用操作命令合集</title>
    <link href="/post/text11-linux-2-vim.html"/>
    <url>/post/text11-linux-2-vim.html</url>
    
    <content type="html"><![CDATA[<h1 id="vim-编辑器常用操作命令合集"><a href="#vim-编辑器常用操作命令合集" class="headerlink" title="vim 编辑器常用操作命令合集"></a>vim 编辑器常用操作命令合集</h1><p>本文只给出基础常用命令，详细命令与使用方法，参考知乎文章vim命令全集：<a href="https://zhuanlan.zhihu.com/p/61515833">链接</a>。</p><h2 id="vim-编辑模式"><a href="#vim-编辑模式" class="headerlink" title="vim 编辑模式"></a>vim 编辑模式</h2><p>vim 分为三种模式：<br>1.命令模式：默认进入<br>2.输入模式：输入 i 等<br>3.底线命令模式：输入 :<br><img src="/img/text/text11/1.png" alt="这是第1张图片QwQ"></p><h2 id="本文只给出常用基本操作如下"><a href="#本文只给出常用基本操作如下" class="headerlink" title="本文只给出常用基本操作如下"></a>本文只给出常用基本操作如下</h2><h3 id="1-进入输入模式（命令模式下操作）"><a href="#1-进入输入模式（命令模式下操作）" class="headerlink" title="1.进入输入模式（命令模式下操作）"></a>1.进入输入模式（命令模式下操作）</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">i:</span>  在当前光标的前面插入字符<br><span class="hljs-symbol">a:</span>  在当前光标的后面追加字符<br><span class="hljs-symbol">esc:</span>  退出输入模式<br></code></pre></td></tr></table></figure><h3 id="2-光标移动与页面滚动（命令模式下操作）"><a href="#2-光标移动与页面滚动（命令模式下操作）" class="headerlink" title="2.光标移动与页面滚动（命令模式下操作）"></a>2.光标移动与页面滚动（命令模式下操作）</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile">单个字符移动：<br><span class="hljs-section">h:  向左移动</span><br><span class="hljs-section">l:  向右移动</span><br><span class="hljs-section">j:  向下移动</span><br><span class="hljs-section">k:  向上移动</span><br><span class="hljs-section">xh:  向左移动x个字符距离</span><br><br>滚屏与跳转<br><span class="hljs-section">半屏滚动:  ctrl+u/ctrl+d</span><br><span class="hljs-section">全屏滚动:  ctrl+f/ctrl+b</span><br></code></pre></td></tr></table></figure><h3 id="3-常用编辑操作（命令模式下操作）"><a href="#3-常用编辑操作（命令模式下操作）" class="headerlink" title="3.常用编辑操作（命令模式下操作）"></a>3.常用编辑操作（命令模式下操作）</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">y:  复制</span><br><span class="hljs-section">yy:  复制一整行</span><br><span class="hljs-section">p:  粘贴</span><br><span class="hljs-section">~:  修改光标下字符的大小写</span><br></code></pre></td></tr></table></figure><h3 id="4-撤销操作（命令模式下操作）"><a href="#4-撤销操作（命令模式下操作）" class="headerlink" title="4.撤销操作（命令模式下操作）"></a>4.撤销操作（命令模式下操作）</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">u</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> 撤销</span><br><span class="hljs-attribute">ctrl + r</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> 反向撤销</span><br></code></pre></td></tr></table></figure><h3 id="5-其他常用操作（底线命令模式下操作）"><a href="#5-其他常用操作（底线命令模式下操作）" class="headerlink" title="5.其他常用操作（底线命令模式下操作）"></a>5.其他常用操作（底线命令模式下操作）</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">/查找内容<span class="hljs-symbol">:</span>  查找（<span class="hljs-built_in">n</span>向下查找，<span class="hljs-built_in">N</span>向上查找）<br>创建一个折叠<br>    zf200<span class="hljs-symbol">G:</span>将光标和<span class="hljs-number">200</span>行之间的代码折叠起来<br></code></pre></td></tr></table></figure><h3 id="6-保存与退出操作（底线命令模式下操作）"><a href="#6-保存与退出操作（底线命令模式下操作）" class="headerlink" title="6.保存与退出操作（底线命令模式下操作）"></a>6.保存与退出操作（底线命令模式下操作）</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:q</span>  若文件没有修改，直接退出<br><span class="hljs-symbol">:q!</span>  文件已经被修改，放弃修改退出<br><span class="hljs-symbol">:wq</span>  文件已经被修改，保存修改并退出<br><span class="hljs-symbol">:e!</span>  放弃修改，重新回到文件打开时的状态<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>备忘录</tag>
      
      <tag>Linux操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用操作命令合集</title>
    <link href="/post/text10-linux-1-basicorder.html"/>
    <url>/post/text10-linux-1-basicorder.html</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-常用操作命令合集"><a href="#Linux-常用操作命令合集" class="headerlink" title="Linux 常用操作命令合集"></a>Linux 常用操作命令合集</h1><p>注:本文转载自此CSDN文章：<a href="https://blog.csdn.net/m0_46422300/article/details/104645072">原文链接</a>，有删改，若有侵权请联系删除。</p><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-1-Linux系统的文件结构"><a href="#1-1-Linux系统的文件结构" class="headerlink" title="1.1 Linux系统的文件结构"></a>1.1 Linux系统的文件结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin        二进制文件，系统常规命令<br>/boot       系统启动分区，系统启动时读取的文件<br>/dev        设备文件<br>/etc        大多数配置文件<br>/home       普通用户的家目录<br>/lib        32位函数库<br>/lib64      64位库<br>/media      手动临时挂载点<br>/mnt        手动临时挂载点<br>/opt        第三方软件安装位置<br>/proc       进程信息及硬件信息<br>/root       临时设备的默认挂载点<br>/sbin       系统管理命令<br>/srv        数据<br>/var        数据<br>/sys        内核相关信息<br>/tmp        临时文件<br>/usr        用户相关设定<br></code></pre></td></tr></table></figure><h3 id="1-2-Linux系统命令行的含义"><a href="#1-2-Linux系统命令行的含义" class="headerlink" title="1.2 Linux系统命令行的含义"></a>1.2 Linux系统命令行的含义</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal">示例：root<span class="hljs-variable">@app00</span>:~<span class="hljs-comment"># </span><br>root    /<span class="hljs-regexp">/用户名，root为超级用户</span><br><span class="hljs-regexp">@       /</span><span class="hljs-regexp">/分隔符</span><br><span class="hljs-regexp">app00   /</span><span class="hljs-regexp">/主机名称</span><br><span class="hljs-regexp">~       /</span><span class="hljs-regexp">/当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:/bin</span><span class="hljs-comment"># ，当前位置在bin目录下）</span><br><span class="hljs-comment">#       //表示当前用户是超级用户，普通用户为$，例如：（&quot;yao@app00:/root$&quot; ，表示使用用户&quot;yao&quot;访问/root文件夹）</span><br></code></pre></td></tr></table></figure><h3 id="1-3-命令的组成"><a href="#1-3-命令的组成" class="headerlink" title="1.3 命令的组成"></a>1.3 命令的组成</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">示例：命令 参数名 参数值<br></code></pre></td></tr></table></figure><h2 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h2><h3 id="2-1-关闭系统"><a href="#2-1-关闭系统" class="headerlink" title="2.1 关闭系统"></a>2.1 关闭系统</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">(<span class="hljs-number">1</span>)立刻关机<br>  shutdown -h now 或者 <span class="hljs-built_in">poweroff</span><br>(<span class="hljs-number">2</span>)两分钟后关机<br>  shutdown -h <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="2-2-关闭重启"><a href="#2-2-关闭重启" class="headerlink" title="2.2 关闭重启"></a>2.2 关闭重启</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">(<span class="hljs-number">1</span>)立刻重启<br>  shutdown -r now 或者 <span class="hljs-built_in">reboot</span><br>(<span class="hljs-number">2</span>)两分钟后重启<br>  shutdown -r <span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><h3 id="2-3-帮助命令（help）"><a href="#2-3-帮助命令（help）" class="headerlink" title="2.3 帮助命令（help）"></a>2.3 帮助命令（help）</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ifconfig  <span class="hljs-params">--help</span>     <span class="hljs-string">//</span>查看 ifconfig 命令的用法<br></code></pre></td></tr></table></figure><h3 id="2-4-命令说明书（man）"><a href="#2-4-命令说明书（man）" class="headerlink" title="2.4 命令说明书（man）"></a>2.4 命令说明书（man）</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">man <span class="hljs-keyword">shutdown</span>         <span class="hljs-string">//</span>打开命令说明后，可按<span class="hljs-string">&quot;q&quot;</span>键退出<br></code></pre></td></tr></table></figure><h3 id="2-5-切换用户（su）"><a href="#2-5-切换用户（su）" class="headerlink" title="2.5 切换用户（su）"></a>2.5 切换用户（su）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">su yao               <span class="hljs-regexp">//</span>切换为用户<span class="hljs-string">&quot;yao&quot;</span>,输入后回车需要输入该用户的密码<br><span class="hljs-keyword">exit</span>                 <span class="hljs-regexp">//</span>退出当前用户<br></code></pre></td></tr></table></figure><h2 id="三、目录操作"><a href="#三、目录操作" class="headerlink" title="三、目录操作"></a>三、目录操作</h2><h3 id="3-1-切换目录（cd）"><a href="#3-1-切换目录（cd）" class="headerlink" title="3.1 切换目录（cd）"></a>3.1 切换目录（cd）</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> /                 <span class="hljs-string">//</span>切换到根目录<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/bin</span>              <span class="hljs-string">//</span>切换到根目录下的bin目录<br><span class="hljs-keyword">cd</span> <span class="hljs-string">../</span>               <span class="hljs-string">//</span>切换到上一级目录 或者使用命令：<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br><span class="hljs-keyword">cd</span> ~                 <span class="hljs-string">//</span>切换到home目录<br><span class="hljs-keyword">cd</span> -                 <span class="hljs-string">//</span>切换到上次访问的目录<br><span class="hljs-keyword">cd</span> xx<span class="hljs-params">(文件夹名)</span>       <span class="hljs-string">//</span>切换到本目录下的名为xx的文件目录，如果目录不存在报错<br><span class="hljs-keyword">cd</span> <span class="hljs-string">/xxx/xx/x</span>         <span class="hljs-string">//</span>可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全<br></code></pre></td></tr></table></figure><h3 id="3-2-查看目录（ls）"><a href="#3-2-查看目录（ls）" class="headerlink" title="3.2 查看目录（ls）"></a>3.2 查看目录（ls）</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span>                   <span class="hljs-string">//</span>查看当前目录下的所有目录和文件<br><span class="hljs-keyword">ls</span> -a                <span class="hljs-string">//</span>查看当前目录下的所有目录和文件（包括隐藏的文件）<br><span class="hljs-keyword">ls</span> -l                <span class="hljs-string">//</span>列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令<span class="hljs-string">&quot;ll&quot;</span>效果一样<br><span class="hljs-keyword">ls</span> <span class="hljs-string">/bin</span>              <span class="hljs-string">//</span>查看指定目录下的所有目录和文件 <br></code></pre></td></tr></table></figure><h3 id="3-3-创建目录（mkdir）"><a href="#3-3-创建目录（mkdir）" class="headerlink" title="3.3 创建目录（mkdir）"></a>3.3 创建目录（mkdir）</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir tools          <span class="hljs-comment">//在当前目录下创建一个名为tools的目录</span><br>mkdir /bin/tools     <span class="hljs-comment">//在指定目录下创建一个名为tools的目录</span><br></code></pre></td></tr></table></figure><h3 id="3-4-修改目录（mv）"><a href="#3-4-修改目录（mv）" class="headerlink" title="3.4 修改目录（mv）"></a>3.4 修改目录（mv）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> 当前目录名 新目录名        //修改目录名，同样适用与文件操作<br><span class="hljs-built_in">mv</span> /usr/tmp/tool /opt       //将/usr/tmp目录下的tool目录剪切到 /opt目录下面<br><span class="hljs-built_in">mv</span> -r /usr/tmp/tool /opt    //递归剪切目录中所有文件和文件夹<br></code></pre></td></tr></table></figure><h3 id="3-5-拷贝目录（cp）"><a href="#3-5-拷贝目录（cp）" class="headerlink" title="3.5 拷贝目录（cp）"></a>3.5 拷贝目录（cp）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /usr/tmp/tool /opt       //将/usr/tmp目录下的tool目录复制到 /opt目录下面<br><span class="hljs-built_in">cp</span> -r /usr/tmp/tool /opt    //递归剪复制目录中所有文件和文件夹<br></code></pre></td></tr></table></figure><h3 id="3-6-搜索目录（find）"><a href="#3-6-搜索目录（find）" class="headerlink" title="3.6 搜索目录（find）"></a>3.6 搜索目录（find）</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> /bin -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;a*&#x27;</span>        <span class="hljs-comment">//查找/bin目录下的所有以a开头的文件或者目录</span><br></code></pre></td></tr></table></figure><h3 id="3-7-删除目录与文件（rm）"><a href="#3-7-删除目录与文件（rm）" class="headerlink" title="3.7 删除目录与文件（rm）"></a>3.7 删除目录与文件（rm）</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> 文件名              <span class="hljs-comment">//删除当前目录下的文件</span><br><span class="hljs-keyword">rm</span> -f 文件名           <span class="hljs-comment">//删除当前目录的的文件（不询问）</span><br><span class="hljs-keyword">rm</span> -r 文件夹名         <span class="hljs-comment">//递归删除当前目录下此名的目录</span><br><span class="hljs-keyword">rm</span> -rf 文件夹名        <span class="hljs-comment">//递归删除当前目录下此名的目录（不询问）</span><br><span class="hljs-keyword">rm</span> -rf *              <span class="hljs-comment">//将当前目录下的所有目录和文件全部删除</span><br><span class="hljs-keyword">rm</span> -rf <span class="hljs-comment">/*             //将根目录下的所有文件全部删除【慎用！相当于格式化系统】</span><br></code></pre></td></tr></table></figure><h2 id="四、文件操作"><a href="#四、文件操作" class="headerlink" title="四、文件操作"></a>四、文件操作</h2><h3 id="4-1-新增文件（touch）"><a href="#4-1-新增文件（touch）" class="headerlink" title="4.1 新增文件（touch）"></a>4.1 新增文件（touch）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">touch  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>         <span class="hljs-comment">//在当前目录下创建名为a的txt文件（文件不存在），如果文件存在，将文件时间属性修改为当前系统时间</span><br></code></pre></td></tr></table></figure><h3 id="4-2-删除文件（rm）"><a href="#4-2-删除文件（rm）" class="headerlink" title="4.2 删除文件（rm）"></a>4.2 删除文件（rm）</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> 文件名              <span class="hljs-comment">//删除当前目录下的文件</span><br><span class="hljs-keyword">rm</span> -f 文件名           <span class="hljs-comment">//删除当前目录的的文件（不询问）</span><br></code></pre></td></tr></table></figure><h3 id="4-3-查看文件"><a href="#4-3-查看文件" class="headerlink" title="4.3 查看文件"></a>4.3 查看文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>          <span class="hljs-comment">//查看文件最后一屏内容</span><br>less <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>         <span class="hljs-comment">//PgUp向上翻页，PgDn向下翻页，&quot;q&quot;退出查看</span><br>more <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>         <span class="hljs-comment">//显示百分比，回车查看下一行，空格查看下一页，&quot;q&quot;退出查看</span><br>tail -<span class="hljs-number">100</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>    <span class="hljs-comment">//查看文件的后100行，&quot;Ctrl+C&quot;退出查看</span><br></code></pre></td></tr></table></figure><h2 id="五、文件权限"><a href="#五、文件权限" class="headerlink" title="五、文件权限"></a>五、文件权限</h2><h3 id="5-1-权限说明"><a href="#5-1-权限说明" class="headerlink" title="5.1 权限说明"></a>5.1 权限说明</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">文件权限简介：<span class="hljs-string">&#x27;r&#x27;</span> 代表可读（<span class="hljs-number">4</span>），<span class="hljs-string">&#x27;w&#x27;</span> 代表可写（<span class="hljs-number">2</span>），<span class="hljs-string">&#x27;x&#x27;</span> 代表执行权限（<span class="hljs-number">1</span>），括号内代表<span class="hljs-string">&quot;8421法&quot;</span><br>##文件权限信息示例：-rwxrw-r--<br>-第一位：<span class="hljs-string">&#x27;-&#x27;</span>就代表是文件，<span class="hljs-string">&#x27;d&#x27;</span>代表是文件夹<br>-第一组三位：拥有者的权限<br>-第二组三位：拥有者所在的组，组员的权限<br>-第三组三位：代表的是其他用户的权限<br></code></pre></td></tr></table></figure><h3 id="5-2-文件权限"><a href="#5-2-文件权限" class="headerlink" title="5.2 文件权限"></a>5.2 文件权限</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">普通授权    chmod +x <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>    <br><span class="hljs-number">8421</span>法     chmod <span class="hljs-number">777</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span>     <span class="hljs-comment">//1+2+4=7，&quot;7&quot;说明授予所有权限</span><br></code></pre></td></tr></table></figure><h2 id="六、打包与解压"><a href="#六、打包与解压" class="headerlink" title="六、打包与解压"></a>六、打包与解压</h2><h3 id="6-1-说明"><a href="#6-1-说明" class="headerlink" title="6.1 说明"></a>6.1 说明</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.zip</span>、<span class="hljs-string">.rar</span>        <span class="hljs-string">//windows</span>系统中压缩文件的扩展名<br><span class="hljs-string">.tar</span>              <span class="hljs-string">//Linux</span>中打包文件的扩展名<br><span class="hljs-string">.gz</span>               <span class="hljs-string">//Linux</span>中压缩文件的扩展名<br><span class="hljs-string">.tar.gz</span>           <span class="hljs-string">//Linux</span>中打包并压缩文件的扩展名<br></code></pre></td></tr></table></figure><h3 id="6-2-打包文件"><a href="#6-2-打包文件" class="headerlink" title="6.2 打包文件"></a>6.2 打包文件</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar -zcvf 打包压缩后的文件名 要打包的文件<br>参数说明：z：调用gzip压缩命令进行压缩; c：打包文件; v：显示运行过程; f：指定文件名;<br>示例：<br>tar -zcvf a.tar file1 file2,<span class="hljs-string">...</span>      <span class="hljs-string">//</span>多个文件压缩打包<br></code></pre></td></tr></table></figure><h3 id="6-3-解压文件"><a href="#6-3-解压文件" class="headerlink" title="6.3 解压文件"></a>6.3 解压文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zxvf <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.tar</span>                      <span class="hljs-comment">//解包至当前目录</span><br>tar -zxvf <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.tar</span> -C /usr------        <span class="hljs-comment">//指定解压的位置</span><br>unzip test<span class="hljs-selector-class">.zip</span>             <span class="hljs-comment">//解压*.zip文件 </span><br>unzip -l test<span class="hljs-selector-class">.zip</span>          <span class="hljs-comment">//查看*.zip文件的内容 </span><br></code></pre></td></tr></table></figure><h2 id="七、其他常用命令"><a href="#七、其他常用命令" class="headerlink" title="七、其他常用命令"></a>七、其他常用命令</h2><h3 id="7-1find"><a href="#7-1find" class="headerlink" title="7.1find"></a>7.1find</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.c&quot;</span>     <span class="hljs-comment">//将目前目录及其子目录下所有延伸档名是 c 的文件列出来</span><br><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> f         <span class="hljs-comment">//将目前目录其其下子目录中所有一般文件列出</span><br><span class="hljs-built_in">find</span> . -ctime -<span class="hljs-number">20</span>      <span class="hljs-comment">//将目前目录及其子目录下所有最近 20 天内更新过的文件列出</span><br><span class="hljs-built_in">find</span> /var/<span class="hljs-built_in">log</span> -<span class="hljs-built_in">type</span> f -mtime +<span class="hljs-number">7</span> -ok rm &#123;&#125; \;     <span class="hljs-comment">//查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们</span><br><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> f -perm <span class="hljs-number">644</span> -<span class="hljs-built_in">exec</span> ls -l &#123;&#125; \;       <span class="hljs-comment">//查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件</span><br><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">size</span> <span class="hljs-number">0</span> -<span class="hljs-built_in">exec</span> ls -l &#123;&#125; \;         <span class="hljs-comment">//为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径</span><br></code></pre></td></tr></table></figure><h3 id="7-2-whereis"><a href="#7-2-whereis" class="headerlink" title="7.2 whereis"></a>7.2 whereis</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">whereis <span class="hljs-keyword">ls</span>             <span class="hljs-string">//</span>将和<span class="hljs-keyword">ls</span>文件相关的文件都查找出来<br></code></pre></td></tr></table></figure><h3 id="7-3-which"><a href="#7-3-which" class="headerlink" title="7.3 which"></a>7.3 which</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：<span class="hljs-built_in">which</span>指令会在环境变量<span class="hljs-variable">$PATH</span>设置的目录里查找符合条件的文件。<br><span class="hljs-built_in">which</span> bash             //查看指令<span class="hljs-string">&quot;bash&quot;</span>的绝对路径<br></code></pre></td></tr></table></figure><h3 id="7-4-sudo"><a href="#7-4-sudo" class="headerlink" title="7.4 sudo"></a>7.4 sudo</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">说明：sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。需要输入自己账户密码。<br>使用权限：在 <span class="hljs-regexp">/etc/</span>sudoers 中有出现的使用者<br>sudo -l                              <span class="hljs-regexp">//</span>列出目前的权限<br>$ sudo -u yao vi ~www<span class="hljs-regexp">/index.html    /</span>/以 yao 用户身份编辑  home 目录下www目录中的 index.html 文件<br></code></pre></td></tr></table></figure><h3 id="7-5-grep"><a href="#7-5-grep" class="headerlink" title="7.5 grep"></a>7.5 grep</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -i <span class="hljs-string">&quot;the&quot;</span> demo_file              <span class="hljs-comment">//在文件中查找字符串(不区分大小写)</span><br><span class="hljs-keyword">grep</span> -A <span class="hljs-number">3</span> -i <span class="hljs-string">&quot;example&quot;</span> demo_text     <span class="hljs-comment">//输出成功匹配的行，以及该行之后的三行</span><br><span class="hljs-keyword">grep</span> -r <span class="hljs-string">&quot;ramesh&quot;</span> *                   <span class="hljs-comment">//在一个文件夹中递归查询包含指定字符串的文件</span><br></code></pre></td></tr></table></figure><h3 id="7-6-service"><a href="#7-6-service" class="headerlink" title="7.6 service"></a>7.6 service</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">说明：service命令用于运行<span class="hljs-type">System</span> <span class="hljs-type">V</span> <span class="hljs-keyword">init</span>脚本，这些脚本一般位于<span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径<br>service ssh status      <span class="hljs-comment">//查看服务状态 </span><br>service <span class="hljs-operator">--</span>status<span class="hljs-operator">-</span>all    <span class="hljs-comment">//查看所有服务状态 </span><br>service ssh restart     <span class="hljs-comment">//重启服务 </span><br></code></pre></td></tr></table></figure><h3 id="7-7-free"><a href="#7-7-free" class="headerlink" title="7.7 free"></a>7.7 free</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">说明：这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况 <br><span class="hljs-keyword">free</span> -g            <span class="hljs-comment">//以G为单位输出内存的使用量，-g为GB，-m为MB，-k为KB，-b为字节 </span><br><span class="hljs-keyword">free</span> -t            <span class="hljs-comment">//查看所有内存的汇总</span><br></code></pre></td></tr></table></figure><h3 id="7-8-top"><a href="#7-8-top" class="headerlink" title="7.8 top"></a>7.8 top</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">top</span>               <span class="hljs-comment">//显示当前系统中占用资源最多的一些进程, shift+m 按照内存大小查看</span><br></code></pre></td></tr></table></figure><h3 id="7-9-df"><a href="#7-9-df" class="headerlink" title="7.9 df"></a>7.9 df</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">说明：显示文件系统的磁盘使用情况<br>df -h            <span class="hljs-comment">//一种易看的显示</span><br></code></pre></td></tr></table></figure><h3 id="7-10-mount"><a href="#7-10-mount" class="headerlink" title="7.10 mount"></a>7.10 mount</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mount <span class="hljs-string">/dev/sdb1</span> <span class="hljs-string">/u01</span>              <span class="hljs-string">//</span>挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上<br>dev/sdb1 <span class="hljs-string">/u01</span> ext2 defaults 0 2   <span class="hljs-string">//</span>添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载 <br></code></pre></td></tr></table></figure><h3 id="7-11-uname"><a href="#7-11-uname" class="headerlink" title="7.11 uname"></a>7.11 uname</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">说明：<span class="hljs-built_in">uname</span>可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息 <br><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><h3 id="7-12-apt-Ubuntu-yum-CentOS"><a href="#7-12-apt-Ubuntu-yum-CentOS" class="headerlink" title="7.12 apt(Ubuntu)&#x2F;yum(CentOS)"></a>7.12 apt(Ubuntu)&#x2F;yum(CentOS)</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">说明：安装插件命令<br>apt/yum install httpd      <span class="hljs-comment">//使用yum安装apache </span><br>apt/yum update httpd       <span class="hljs-comment">//更新apache </span><br>apt/yum remove httpd       <span class="hljs-comment">//卸载/删除apache </span><br></code></pre></td></tr></table></figure><h3 id="7-13-rpm"><a href="#7-13-rpm" class="headerlink" title="7.13 rpm"></a>7.13 rpm</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">说明：插件安装命令<br>rpm -ivh httpd-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>-<span class="hljs-number">22.0</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.el5</span><span class="hljs-selector-class">.i386</span><span class="hljs-selector-class">.rpm</span>      <span class="hljs-comment">//使用rpm文件安装apache </span><br>rpm -uvh httpd-<span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>-<span class="hljs-number">22.0</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.el5</span><span class="hljs-selector-class">.i386</span><span class="hljs-selector-class">.rpm</span>      <span class="hljs-comment">//使用rpm更新apache </span><br>rpm -ev httpd                                 <span class="hljs-comment">//卸载/删除apache </span><br></code></pre></td></tr></table></figure><h3 id="7-14-date"><a href="#7-14-date" class="headerlink" title="7.14 date"></a>7.14 date</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;01/31/2010 23:59:53&quot;</span>   <span class="hljs-comment">///设置系统时间</span><br></code></pre></td></tr></table></figure><h3 id="7-15-wget"><a href="#7-15-wget" class="headerlink" title="7.15 wget"></a>7.15 wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">说明：使用wget从网上下载软件、音乐、视频 <br>示例：wget http:<span class="hljs-regexp">//</span>prdownloads.sourceforge.net<span class="hljs-regexp">/sourceforge/</span>nagios/nagios-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.tar.gz<br><span class="hljs-regexp">//</span>下载文件并以指定的文件名保存文件<br>wget -O nagios.tar.gz http:<span class="hljs-regexp">//</span>prdownloads.sourceforge.net<span class="hljs-regexp">/sourceforge/</span>nagios/nagios-<span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>.tar.gz<br></code></pre></td></tr></table></figure><h3 id="7-16-ftp"><a href="#7-16-ftp" class="headerlink" title="7.16 ftp"></a>7.16 ftp</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ftp</span> <span class="hljs-built_in">IP</span>/hostname    <span class="hljs-comment">//访问ftp服务器</span><br><span class="hljs-keyword">mls</span> *.html -       <span class="hljs-comment">//显示远程主机上文件列表</span><br></code></pre></td></tr></table></figure><h3 id="7-17-scp"><a href="#7-17-scp" class="headerlink" title="7.17 scp"></a>7.17 scp</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">scp</span> /<span class="hljs-meta">opt</span>/<span class="hljs-meta">data</span>.txt  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">101</span>:/<span class="hljs-meta">opt</span>/    <span class="hljs-comment">//将本地opt目录下的data文件发送到192.168.1.101服务器的opt目录下</span><br></code></pre></td></tr></table></figure><h2 id="八、系统管理"><a href="#八、系统管理" class="headerlink" title="八、系统管理"></a>八、系统管理</h2><h3 id="8-1-防火墙操作"><a href="#8-1-防火墙操作" class="headerlink" title="8.1 防火墙操作"></a>8.1 防火墙操作</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gauss">service iptables status      <span class="hljs-comment">//查看iptables服务的状态</span><br>service iptables start       <span class="hljs-comment">//开启iptables服务</span><br>service iptables <span class="hljs-keyword">stop</span>        <span class="hljs-comment">//停止iptables服务</span><br>service iptables restart     <span class="hljs-comment">//重启iptables服务</span><br>chkconfig iptables off       <span class="hljs-comment">//关闭iptables服务的开机自启动</span><br>chkconfig iptables on        <span class="hljs-comment">//开启iptables服务的开机自启动</span><br><span class="hljs-meta">##centos7 防火墙操作</span><br>systemctl status firewalld.service     <span class="hljs-comment">//查看防火墙状态</span><br>systemctl <span class="hljs-keyword">stop</span> firewalld.service       <span class="hljs-comment">//关闭运行的防火墙</span><br>systemctl <span class="hljs-keyword">disable</span> firewalld.service    <span class="hljs-comment">//永久禁止防火墙服务</span><br></code></pre></td></tr></table></figure><h3 id="8-2修改主机名（CentOS-7）"><a href="#8-2修改主机名（CentOS-7）" class="headerlink" title="8.2修改主机名（CentOS 7）"></a>8.2修改主机名（CentOS 7）</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> 主机名<br></code></pre></td></tr></table></figure><h3 id="8-3-查看网络"><a href="#8-3-查看网络" class="headerlink" title="8.3 查看网络"></a>8.3 查看网络</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><h3 id="8-4-修改IP"><a href="#8-4-修改IP" class="headerlink" title="8.4 修改IP"></a>8.4 修改IP</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">修改网络配置文件，文件地址：/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="hljs-section">------------------------------------------------</span><br>主要修改以下配置：  <br>TYPE=Ethernet               //网络类型<br>BOOTPROTO=static            //静态IP<br>DEVICE=ens00                //网卡名<br>IPADDR=192.168.1.100        //设置的IP<br>NETMASK=255.255.255.0       //子网掩码<br>GATEWAY=192.168.1.1         //网关<br>DNS1=192.168.1.1            //DNS<br>DNS2=8.8.8.8                //备用DNS<br><span class="hljs-section">ONBOOT=yes                  //系统启动时启动此设置</span><br><span class="hljs-section">-------------------------------------------------</span><br>修改保存以后使用命令重启网卡：service network restart<br></code></pre></td></tr></table></figure><h3 id="8-5-配置映射"><a href="#8-5-配置映射" class="headerlink" title="8.5 配置映射"></a>8.5 配置映射</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">修改文件： vi /etc/hosts<br>在文件最后添加映射地址，示例如下：<br> <span class="hljs-number">192.168.1.101</span>  node1<br> <span class="hljs-number">192.168.1.102</span>  node2<br> <span class="hljs-number">192.168.1.103</span>  node3<br>配置好以后保存退出，输入命令：ping node1 ，可见实际 ping 的是 <span class="hljs-number">192.168.1.101</span>。<br></code></pre></td></tr></table></figure><h3 id="8-6-查看进程"><a href="#8-6-查看进程" class="headerlink" title="8.6 查看进程"></a>8.6 查看进程</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ps -ef         <span class="hljs-comment">//查看所有正在运行的进程</span><br></code></pre></td></tr></table></figure><h3 id="8-7-结束进程"><a href="#8-7-结束进程" class="headerlink" title="8.7 结束进程"></a>8.7 结束进程</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">kill</span> pid       <span class="hljs-comment">//杀死该pid的进程</span><br><span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span> pid    <span class="hljs-comment">//强制杀死该进程   </span><br></code></pre></td></tr></table></figure><h3 id="8-8-查看链接"><a href="#8-8-查看链接" class="headerlink" title="8.8 查看链接"></a>8.8 查看链接</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ping IP       <span class="hljs-comment"> //查看与此IP地址的连接情况</span><br>netstat -<span class="hljs-keyword">an</span>   <span class="hljs-comment"> //查看当前系统端口</span><br>netstat -<span class="hljs-keyword">an</span> | grep <span class="hljs-number">8080</span>    <span class="hljs-comment"> //查看指定端口</span><br></code></pre></td></tr></table></figure><h3 id="8-9-快速清屏"><a href="#8-9-快速清屏" class="headerlink" title="8.9 快速清屏"></a>8.9 快速清屏</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ctrl+l        <span class="hljs-comment">//清屏，往上翻可以查看历史操作</span><br>clear         <span class="hljs-comment">//清屏，不可以查看历史操作</span><br></code></pre></td></tr></table></figure><h3 id="8-10-远程主机"><a href="#8-10-远程主机" class="headerlink" title="8.10 远程主机"></a>8.10 远程主机</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ssh</span> <span class="hljs-built_in">IP</span>       <span class="hljs-comment">//远程主机，需要输入用户名和密码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>备忘录</tag>
      
      <tag>Linux操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目开发记录1 — 长整数处理</title>
    <link href="/post/text9-project-1.html"/>
    <url>/post/text9-project-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="项目开发记录1-—-长整数处理"><a href="#项目开发记录1-—-长整数处理" class="headerlink" title="项目开发记录1 — 长整数处理"></a>项目开发记录1 — 长整数处理</h1><h2 id="1、程序结构设计"><a href="#1、程序结构设计" class="headerlink" title="1、程序结构设计"></a>1、程序结构设计</h2><p><img src="/img/text/text9/9-1.png" alt="这是第1张图片QwQ"></p><h2 id="2、主要函数功能实现"><a href="#2、主要函数功能实现" class="headerlink" title="2、主要函数功能实现"></a>2、主要函数功能实现</h2><h3 id="1-除法"><a href="#1-除法" class="headerlink" title="(1)除法"></a>(1)除法</h3><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>核心逻辑：从高位依次除以除数，分别存储结果与余数，余数乘10进位与下一位相加，再循环执行上述操作<br>下图给出了一个长整数除以int整形数据的简单示例<br><img src="/img/text/text9/9-2.png" alt="这是第2张图片QwQ"></p><h4 id="核心代码（仅给出计算第一个数据进行除法运算示例的部分代码）"><a href="#核心代码（仅给出计算第一个数据进行除法运算示例的部分代码）" class="headerlink" title="核心代码（仅给出计算第一个数据进行除法运算示例的部分代码）"></a>核心代码（仅给出计算第一个数据进行除法运算示例的部分代码）</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">numa[<span class="hljs-number">0</span>] = strlen(s1);//储存余数使用<br>for (i = strlen(s1) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>numa[i + <span class="hljs-number">1</span>] = s1[strlen(s1) - <span class="hljs-number">1</span> - i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>for (i = strlen(s1); i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>numa[<span class="hljs-number">0</span>] = numa[i] <span class="hljs-comment">% num;//存储余数</span><br>numa[i] = numa[i] / num;//存储结果<br>if (i != <span class="hljs-number">1</span>) &#123;<br>numa[i - <span class="hljs-number">1</span>] = <span class="hljs-number">10</span> * numa[<span class="hljs-number">0</span>] + numa[i - <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-进制转换"><a href="#2-进制转换" class="headerlink" title="(2)进制转换"></a>(2)进制转换</h3><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><p>核心逻辑：除2&#x2F;8&#x2F;16取余，倒序输出（转16进制时需要对10 - 15转换成对应大写字母输出%c字符型）<br>下图给出了将一个十进制数据转换为八进制的简单示例<br><img src="/img/text/text9/9-3.png" alt="这是第3张图片QwQ"></p><h4 id="核心代码（仅给出计算第一个数据进制转换示例的部分代码）"><a href="#核心代码（仅给出计算第一个数据进制转换示例的部分代码）" class="headerlink" title="核心代码（仅给出计算第一个数据进制转换示例的部分代码）"></a>核心代码（仅给出计算第一个数据进制转换示例的部分代码）</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TNS</span><span class="hljs-params">(<span class="hljs-keyword">char</span> s1[], <span class="hljs-keyword">char</span> s2[], <span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>Divide(s01, s02, <span class="hljs-keyword">target</span>);<br>result_1[m] = numa[<span class="hljs-number">0</span>];<br>m++;<br>i = strlen(s01);<br><span class="hljs-keyword">while</span> (numa[i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>i--;<br>&#125;<br><br>j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>s01[j] = numa[i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span> (i != <span class="hljs-number">1</span>) &#123;<br>j++;<br>&#125;<br>&#125;<br><br>s01[j + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> &amp;&amp; s01[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="16进制字母替换代码"><a href="#16进制字母替换代码" class="headerlink" title="16进制字母替换代码"></a>16进制字母替换代码</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs prolog">for (i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>if (result_1[i] &gt; <span class="hljs-number">9</span>) &#123;<br>res_ch1[i] = result_1[i] <span class="hljs-comment">% 10 + 65;</span><br>&#125;<br>else &#123;<br>res_ch1[i] = result_1[i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>&#125;<br>for (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>if (result_2[i] &gt; <span class="hljs-number">9</span>) &#123;<br>res_ch2[i] = result_2[i] <span class="hljs-comment">% 10 + 65;</span><br>&#125;<br>else &#123;<br>res_ch2[i] = result_2[i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、项目打包-发行为exe-安装包"><a href="#3、项目打包-发行为exe-安装包" class="headerlink" title="3、项目打包&#x2F;发行为exe&#x2F;安装包"></a>3、项目打包&#x2F;发行为exe&#x2F;安装包</h2><p>会另行在其他文章详细记录。</p>]]></content>
    
    
    <categories>
      
      <category>项目开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>项目开发</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录6 — 习题3</title>
    <link href="/post/text8-cstudy-6.html"/>
    <url>/post/text8-cstudy-6.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题3-—-二维数组输出回型矩阵"><a href="#习题3-—-二维数组输出回型矩阵" class="headerlink" title="习题3 — 二维数组输出回型矩阵"></a>习题3 — 二维数组输出回型矩阵</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数n，按要求输出n∗n的回型矩阵</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一行，包含一个整数n<br>1&lt;&#x3D;n&lt;&#x3D;19</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出n行，每行包含n个正整数.</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">16</span> <span class="hljs-number">15</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><img src="/img/text/text8/1.png" alt="这是第1张图片QwQ"><br><img src="/img/text/text8/2.png" alt="这是第2张图片QwQ"><br><img src="/img/text/text8/3.png" alt="这是第3张图片QwQ"><br><img src="/img/text/text8/4.png" alt="这是第4张图片QwQ"><br><img src="/img/text/text8/5.png" alt="这是第5张图片QwQ"><br><img src="/img/text/text8/6.png" alt="这是第6张图片QwQ"></p><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include &lt;stdio.h&gt;<br><br><span class="hljs-built_in">int</span> main()&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>, i, j;<br>    <span class="hljs-built_in">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">int</span> data = <span class="hljs-number">1</span>; //数组数据<br><br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">n</span>);<br><br>    <span class="hljs-built_in">int</span> up = <span class="hljs-number">0</span>, down = <span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>, <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>;<br><br>    //回型递增定义数组数据<br>    while (data &lt;= <span class="hljs-built_in">n</span>*<span class="hljs-built_in">n</span>) &#123;<br>        for (i = <span class="hljs-built_in">left</span>; i &lt;= <span class="hljs-built_in">right</span>; i++) &#123;<br>            a[up][i] = data++; <br>        &#125;<br>        up++;<br><br>        for (i = up; i &lt;= down; i++) &#123;<br>            a[i][<span class="hljs-built_in">right</span>] = data++; <br>        &#125;<br>        <span class="hljs-built_in">right</span>--;<br><br>        for (i = <span class="hljs-built_in">right</span>; i &gt;= <span class="hljs-built_in">left</span>; i--) &#123;<br>        a[down][i] = data++;<br>        &#125;<br>        down--;<br><br>        for (i = down; i &gt;= up; i--) &#123;<br>            a[i][<span class="hljs-built_in">left</span>] = data++; <br>        &#125;<br>        <span class="hljs-built_in">left</span>++;<br>    &#125;<br><br>    //输出<br>    for (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; i++) &#123;<br>        for (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">n</span>; j++) &#123;<br>            printf(<span class="hljs-string">&quot;%4d&quot;</span>,a[i][j]);<br>        &#125;<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录5 — 习题2</title>
    <link href="/post/text7-cstudy-5.html"/>
    <url>/post/text7-cstudy-5.html</url>
    
    <content type="html"><![CDATA[<h1 id="习题2-—-冒牌排序过程输出（不输出重复部分）"><a href="#习题2-—-冒牌排序过程输出（不输出重复部分）" class="headerlink" title="习题2 — 冒牌排序过程输出（不输出重复部分）"></a>习题2 — 冒牌排序过程输出（不输出重复部分）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一组正整数，请你用冒泡排序的方式把这组数据从小到达排列，要求每经过一轮排序都要把当前数据的状态输出并且排序完成后立即停止循环。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个正整数n，表示这组数据的个数。<br>第二行输入n个正整数。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">49 </span><span class="hljs-number">38</span> <span class="hljs-number">65</span> <span class="hljs-number">97</span> <span class="hljs-number">76</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出若干行，每行n个数，表示每经过一轮排序之后的数据(若输入数据有序，则无输出!!)。</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">49</span> <span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">38 </span><span class="hljs-number">13</span> <span class="hljs-number">27</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">27</span> <span class="hljs-number">38</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">65</span> <span class="hljs-number">76</span> <span class="hljs-number">97</span><br></code></pre></td></tr></table></figure><h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> i, j, temp, n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-comment">//布尔标记值</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; n; m++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[m]);<br><span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;   <span class="hljs-comment">//1</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span>; j++) &#123;   <span class="hljs-comment">//2</span><br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//进行循环则改变布尔标记值，当顺序排好（a[j]&lt;a[j+1]）后不进行循环</span><br>temp = a[j];<br>a[j] = a[j + <span class="hljs-number">1</span>];<br>a[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!flag) &#123; <br><span class="hljs-keyword">break</span>;   <span class="hljs-comment">/*循环1的break，判断标记值，若不为0，break退出循环1，输出结束*/</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[k]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录4 — 链表3</title>
    <link href="/post/text6-cstudy-4.html"/>
    <url>/post/text6-cstudy-4.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表3-—-单链表结点删除"><a href="#链表3-—-单链表结点删除" class="headerlink" title="链表3 — 单链表结点删除"></a>链表3 — 单链表结点删除</h1><h2 id="局部代码详解"><a href="#局部代码详解" class="headerlink" title="局部代码详解"></a>局部代码详解</h2><p>目的：实现单链表数据为x的结点删除</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//删除结点函数</span><br>void del(List *head,int x)&#123;<br>    <span class="hljs-keyword">if</span> (head == NULL) &#123;<br>        return;<br>    &#125;<br>     <span class="hljs-comment">//单独判断头结点，如果为x则删除</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (head-&gt;</span>d == x) &#123;<br>        List *temp = head;<br>        <span class="hljs-function"><span class="hljs-title">head</span> = head-&gt;</span>next;<br>        free(temp);    <span class="hljs-comment">//删除结点（释放内存）</span><br>    &#125;<br>    <span class="hljs-comment">//定义结构体指针</span><br>    List *p = head;<br><br>    <span class="hljs-comment">//头节点判断结束，顺序判断各结点是否需要删除</span><br>    <span class="hljs-function"><span class="hljs-title">while</span> (p-&gt;</span>next != NULL) &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (p-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>d == x) &#123;<br>            L<span class="hljs-function"><span class="hljs-title">ist</span> *temp = p-&gt;</span>next;    <span class="hljs-comment">//将需要删除的结点储存在结构体指针temp中</span><br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = p-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>next;   <span class="hljs-comment">//将指针移动到下一结点处</span><br>            free(temp);    <span class="hljs-comment">//删除结点（释放内存）</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span> = p-&gt;</span>next;    <span class="hljs-comment">//不需要删除时，判断下一结点是否删除</span><br>        &#125;<br>    &#125;<br>    return;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span>&#123;<br>    <span class="hljs-type">int</span> d;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span> *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function">List *<span class="hljs-title">add_list</span><span class="hljs-params">(List *head, <span class="hljs-type">int</span> data)</span></span>&#123;<br>    List *newnode = (List *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(List));<br><br>    newnode-&gt;d = data;<br>    newnode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (head ==<span class="hljs-literal">NULL</span>) &#123;<br>        head = newnode;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        List *pT = head;<br>        <span class="hljs-keyword">while</span> (pT-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            pT = pT-&gt;next;<br>        &#125;<br>        pT-&gt;next = newnode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">//输出函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(List *head)</span></span>&#123;<br>    List *pT = head;<br>    <span class="hljs-keyword">while</span> (pT != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,pT-&gt;d);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        pT = pT-&gt;next;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//删除结点函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(List *head,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;d == x) &#123;<br>        List *temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br>   <br>    List *p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;next-&gt;d == x) &#123;<br>            List *temp = p-&gt;next;<br>            p-&gt;next = p-&gt;next-&gt;next;<br>            <span class="hljs-built_in">free</span>(temp);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            p = p-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,i,x;<br>    List *head = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-type">int</span> a[n];<br><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        head = <span class="hljs-built_in">add_list</span>(head, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">del</span>(head,x);   <span class="hljs-comment">//调用删除结点函数</span><br>    <span class="hljs-built_in">output</span>(head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录3 — 链表2</title>
    <link href="/post/text5-cstudy-3.html"/>
    <url>/post/text5-cstudy-3.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表2-—-单链表尾插法详解"><a href="#链表2-—-单链表尾插法详解" class="headerlink" title="链表2 — 单链表尾插法详解"></a>链表2 — 单链表尾插法详解</h1><p>目的：实现创建新结点</p><p>尾插法图解如下<br><img src="/img/text/text5/text5.jpg" alt="图解"></p><p>代码实现如下</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> struct LinkList&#123;<br>int d;<br>struct LinkList *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br>List *add_List(List* Head, int data)&#123;<br><br>List *<span class="hljs-keyword">new</span><span class="hljs-type">node</span> = (List*)malloc(sizeof(List));   <span class="hljs-comment">//创建新结点</span><br><br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;d = data;   <span class="hljs-comment">//结点赋值</span><br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = NULL; <br><br><br><span class="hljs-keyword">if</span>(Head == NULL)<br>&#123;<br>Head = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>List *pT = Head;<br><span class="hljs-keyword">while</span> (pT-&gt;next != NULL)<br>&#123;<br>pT = pT-&gt;next;<br>&#125;<br>pT-&gt;next = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>; <br><span class="hljs-comment">//注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next</span><br><br>&#125;<br><span class="hljs-keyword">return</span> Head;    <span class="hljs-comment">//返回头结点值</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录2 — 链表1</title>
    <link href="/post/text4-cstudy-2.html"/>
    <url>/post/text4-cstudy-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="链表1-—-单链表遍历输出"><a href="#链表1-—-单链表遍历输出" class="headerlink" title="链表1 — 单链表遍历输出"></a>链表1 — 单链表遍历输出</h1><p>目的：实现数组元素利用单链表的遍历输出</p><p>单链表的基本结构<br>单链表的结点插入的尾插法<br>单链表结点的遍历输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//定义结点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span>&#123;<br><span class="hljs-type">int</span> d;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkList</span> *next;<br>&#125; List;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function">List *<span class="hljs-title">add_List</span><span class="hljs-params">(List* Head, <span class="hljs-type">int</span> data)</span></span>&#123;<br><br>List *newnode = (List*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(List));   <span class="hljs-comment">//创建新结点</span><br><br>newnode-&gt;d = data;   <span class="hljs-comment">//结点赋值</span><br>newnode-&gt;next = <span class="hljs-literal">NULL</span>; <br><br><br><span class="hljs-keyword">if</span>(Head == <span class="hljs-literal">NULL</span>)<br>&#123;<br>Head = newnode;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>List *pT = Head;<br><span class="hljs-keyword">while</span> (pT-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>pT = pT-&gt;next;<br>&#125;<br>pT-&gt;next = newnode; <br><span class="hljs-comment">//注意！！！跳出循环时pT-&gt;next为NULL，此时将newnode新结点接入pT-&gt;next</span><br><br>&#125;<br><span class="hljs-keyword">return</span> Head;    <span class="hljs-comment">//返回头结点值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,i,j;<br>List *Head = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//定义头结点</span><br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-type">int</span> a[n];<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">getchar</span>();<br>&#125;<br><br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt;n; j++)&#123;<br>Head = <span class="hljs-built_in">add_List</span>(Head,a[j]);<br>&#125;<br>List *p = Head;<br><span class="hljs-comment">/*定义指针指向Head头节点</span><br><span class="hljs-comment">注意！！！必须在Head被变更后使用该语句*/</span><br><br><span class="hljs-comment">//遍历输出</span><br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>p = p-&gt;next;<br>&#125;<br><br><span class="hljs-comment">//释放内存</span><br>List *temp;<br><span class="hljs-keyword">while</span> (Head != <span class="hljs-literal">NULL</span>) &#123;  <br>    temp = Head;  <br>    Head = Head-&gt;next;  <br>    <span class="hljs-built_in">free</span>(temp);  <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习记录1 — 习题1</title>
    <link href="/post/text3-cstudy-1.html"/>
    <url>/post/text3-cstudy-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="输出浮点数的个位数字"><a href="#输出浮点数的个位数字" class="headerlink" title="输出浮点数的个位数字"></a>输出浮点数的个位数字</h1><p>使用了c语言的&lt;math.h&gt;函数库<br>利用floor()函数向下取整计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> n, mid_0, mid_1;<br>    <span class="hljs-type">int</span> n_last;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>    mid_0 = <span class="hljs-built_in">floor</span>(n/<span class="hljs-number">10</span>);<br>    mid_1 = n - (<span class="hljs-number">10</span>*mid_0);<br><br>    n_last = <span class="hljs-built_in">floor</span>(mid_1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,n_last);<br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机摄像头拍摄灯笼偏色</title>
    <link href="/post/text2-lantern.html"/>
    <url>/post/text2-lantern.html</url>
    
    <content type="html"><![CDATA[<p>感觉手机摄像头拍夜晚灯笼偏色问题比较严重啊<br>还容易过曝<br><img src="/img/text/text2/2-1.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-2.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-3.jpg" alt="这是一张图片QwQ"><br><img src="/img/text/text2/2-4.jpg" alt="这是一张图片QwQ"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“坐和放宽”——Windows系统安装方案全指南</title>
    <link href="/post/text1-system-install.html"/>
    <url>/post/text1-system-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="观前提醒"><a href="#观前提醒" class="headerlink" title="观前提醒"></a>观前提醒</h2><p><strong>本文移植自酷安,部分文字有改动</strong><br>本文基本分为三大部分<br>风险提示区，正文部分，与文件链接部分<br>提示区提示风险<del>（撇清关系）</del>不想看的就跳过吧，文件链接放在文末，并且为大家提供了激活工具，需要的请自取</p><h2 id="长文警告"><a href="#长文警告" class="headerlink" title="长文警告"></a>长文警告</h2><p>本文讲介绍多种常见装机方法及操作过程，内容较多，可根据目录和提示选择性浏览，当然，如果你有兴趣可以全部看完<br>（本文无专业术语名词等，可以对小白安装系统起一定的指导作用）</p><h2 id="风险提示"><a href="#风险提示" class="headerlink" title="风险提示"></a>风险提示</h2><p>⚠️以下装机方案都有一定几率失败，且可能损坏您的电脑系统，请谨慎操作<br>⚠️以下操作可能会格式化您的硬盘或U盘，使数据被清除，请一定要做好备份<br>⚠️安装前尽量准备好网卡驱动，以防系统安装完成后无法联网<br>⚠️免责声明：按照本教程进行系统安装对电脑造成损坏或数据丢失的，本人概不负责</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>1.使用微软官方工具下载并安装<br>2.使用微软官方工具创建系统安装U盘<br>3.使用WinNT Setup安装<br>4.使用Dism++安装<br>5.使用pe安装（需要U盘）</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>方案1、3、4可直接运行安装进程<br>方案2、4可创建安装U盘（需要格式化）<br>⚠️需要注意的是，微软官方工具（即方案1、2）仅支持Win10和Win11的安装，且win10安装需要基于win7sp版本及以上的系统，win11安装则需要基于win10进行<br>（ps.个人认为第一种和第三种比较方便，且成功率比较高，意见仅供参考）<br><del>前摇过长（不是）</del></p><p><strong>下面正式开始教程</strong></p><h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><h3 id="1-使用微软官方工具下载并安装"><a href="#1-使用微软官方工具下载并安装" class="headerlink" title="1.使用微软官方工具下载并安装"></a>1.使用微软官方工具下载并安装</h3><p>由于两工具用法基本一致，这里以win10安装工具为例<br>首先同意用户协议<br>选择立即升级这台电脑，等待他下载完成<br><img src="/img/text/text1/1-1.png" alt="这是一张图片QwQ"><br>接下来只需一直按下一步和同意，直到提示你“准备就绪，可以安装”时，注意“更改要保留的应用”这一选项，点击后可以对其更改<br><img src="/img/text/text1/1-2.jpeg" alt="这是一张图片QwQ"><br>更改说明：选择下图中第一项会保留电脑的所有文件、应用及设置<br>选择第二项会清除设置项和应用，保留文件<br>选择第三项删库跑路(<br>无论选择哪个，还是建议先备好份，以防万一<br><img src="/img/text/text1/1-3.jpeg" alt="这是一张图片QwQ"><br>最后一路同意直到弹出全屏提示，接下来等待安装完成即可<br><img src="/img/text/text1/1-4.jpeg" alt="这是一张图片QwQ"></p><p>至此，第一种方案结束</p><h3 id="2-使用微软官方工具创建系统安装U盘"><a href="#2-使用微软官方工具创建系统安装U盘" class="headerlink" title="2.使用微软官方工具创建系统安装U盘"></a>2.使用微软官方工具创建系统安装U盘</h3><p>首先,你需要一个容量≥8G的U盘，必须注意的是，创建系统安装U盘会将其格式化，所以请一定做好备份！<br>打开下载好的工具，下载链接已经在上面给出，选择“创建安装介质”<br><img src="/img/text/text1/1-5.png" alt="这是一张图片QwQ"><br>选择系统版本，这里取消勾选为这台电脑使用合适的配置，可以自定义一些内容<br><img src="/img/text/text1/1-6.png" alt="这是一张图片QwQ"><br>弹出选择要使用的介质时，我们选择U盘，接下来选择你准备好的U盘，等待制作完成<br><img src="/img/text/text1/1-7.png" alt="这是一张图片QwQ"><br>制作完成后，你会发现U盘被重命名了，并多出一些文件，你仍然可以把格式化之前的文件放回U盘，安装时不会删除你U盘中的文件，制作完成后，U盘中的文件必须在U盘根目录下，不能放入文件夹中，否则不能安装系统<br><img src="/img/text/text1/1-8.png" alt="这是一张图片QwQ"><br>接下来，插入U盘，重启系统，进入boot界面，下面给出boot进入的方式，只需在开机时狂按对应键😵，直到boot界面出现，出现后，找到你的U盘，使用方向键选择并按下回车，等待安装进程启动<br>（注意：如果你使用台式电脑，在boot中识别不到U盘或无法正常进入安装，请将U盘插到机箱后面的USB接口，不要插到前面板或延长线上）<br><img src="/img/text/text1/1-9.jpeg" alt="这是一张图片QwQ"><br>接下来选择语言和输入法，点击下一步<br><img src="/img/text/text1/1-10.jpeg" alt="这是一张图片QwQ"><br>我们需要在这里选择“我没有产品密钥”<br><img src="/img/text/text1/1-11.jpeg" alt="这是一张图片QwQ"><br>选择你需要安装的Windows版本<br><img src="/img/text/text1/1-12.jpeg" alt="这是一张图片QwQ"><br>接着，你需要选则安装方式，需要注意的是，选择“升级”一项需要你的Windows版本低于U盘中安装文件的版本<br><img src="/img/text/text1/1-13.jpeg" alt="这是一张图片QwQ"><br>我们这里选择自定义安装，选择要把系统安装到哪一个磁盘，这里选择好以后，我们直接点击下一步<br><img src="/img/text/text1/1-14.jpeg" alt="这是一张图片QwQ"><br>如果弹出下图中的提示，点击确定，接下来等待安装完成即可<br><img src="/img/text/text1/1-15.jpeg" alt="这是一张图片QwQ"></p><p>至此，第二种方案结束</p><h3 id="3-使用WinNT-Setup安装"><a href="#3-使用WinNT-Setup安装" class="headerlink" title="3.使用WinNT Setup安装"></a>3.使用WinNT Setup安装</h3><p>（需要下载镜像文件）<br>首先打开下载好的exe文件，双击打开，如果提示“需要Windows10ADK的某些文件”点击下载即可，进入软件后，根据你要安装的系统版本，选择2000&#x2F;XP&#x2F;2003或Vista&#x2F;7&#x2F;8&#x2F;10&#x2F;11&#x2F;20xx<br>选好以后，选择镜像文件位置<br>（支持的镜像类型iso，wim，swm，esd）<br>接着选择你要将系统安装到哪一个硬盘<br>在版本一栏中，你可以选择你要安装的系统版本，做完这些后，你就可以开始安装了</p><p><strong>可选项</strong><br>此外，如果你需要使用第三方主题，可以在这里勾选“破解系统主题签名”，你还可以选择“优化调整”禁用一些无用的设置，请注意，可选项不是必须执行的<br><img src="/img/text/text1/1-16.jpeg" alt="这是一张图片QwQ"><br>接下来点击最下方的安装，弹出窗口中的选项无需改动，直接点击安装，等待镜像应用完成后，弹性出窗口提示重启，这时重启电脑<br>重启以后，我们会看到系统选择界面，在这里一般会自动选中我们要安装的系统，直接按回车进入安装界面，等待系统安装完成即可</p><p>至此，第三种方案结束</p><h3 id="4-使用Dism-安装系统"><a href="#4-使用Dism-安装系统" class="headerlink" title="4.使用Dism++安装系统"></a>4.使用Dism++安装系统</h3><p>（需要下载镜像文件）<br>为了避免一些大聪明（bushi）不会在Github下载的问题，这里说一下<br>进入文末提供的网站，点击箭头所指位置即可<br><img src="/img/text/text1/1-17.png" alt="这是一张图片QwQ"><br><img src="/img/text/text1/1-18.png" alt="这是一张图片QwQ"><br>接下来将下载好的压缩包解压，双击运行<br>进入软件后点击恢复功能，点击在RE中运行，然后电脑会自动重启并再次出现这个界面<br><img src="/img/text/text1/1-19.png" alt="这是一张图片QwQ"><br>重启后点击文件，点击释放镜像<br><img src="/img/text/text1/1-20.png" alt="这是一张图片QwQ"><br>接下来选择镜像位置，在目标映像中选择系统版本，选择系统安装的硬盘位置，注意一定要勾选添加引导和格式化，接下开等待进度条走完后，重启进入系统安装<br><img src="/img/text/text1/1-21.png" alt="这是一张图片QwQ"></p><p>至此，第四种方案结束</p><h3 id="5-使用pe安装"><a href="#5-使用pe安装" class="headerlink" title="5.使用pe安装"></a>5.使用pe安装</h3><p>（需要下载镜像文件）<br>科普：什么是PE系统<br>Windows PE，即Windows预安装环境用于安装、部署和修复Windows 操作系统，而PE并非为普通用户可以正常使用的操作系统，多数用于开发人员及维修主系统使用。<br>说人话就是不能拿来用，只能装系统(<br>pe系统有很多选择，这里推荐微PE工具箱，免费干净（现在贴主改用FirePE了），到官网下载时会弹出捐赠提示，其实不捐赠也可以下载，点击跳过捐赠即可，下载完成后打开，打开后选择安装PE到U盘<br> <img src="/img/text/text1/1-22.png" alt="这是一张图片QwQ"><br>接下来选择安装方法：选择方案一全能三分区<br>选择你准备好的U盘<br>勾选格式化，选择NTFS，USB-HDD一项不需要改动，接下来的U盘名程和PE壁纸可以自选，如果你的电脑是Legacy启动，那么请勾选包含DOS工具箱（查看启动方式的方法在下面图中给出），接下来点击安装，等待完成即可<br>图一：查看启动方式<br>图二：安装步骤<br> <img src="/img/text/text1/1-23.png" alt="这是一张图片QwQ"><br> <img src="/img/text/text1/1-24.png" alt="这是一张图片QwQ"><br>安装后发现U盘是空的并且容量凭空缩小了，其实是PE系统的分区被隐藏起来，能看到的部分可以作为U盘使用，正常存放文件<br> <img src="/img/text/text1/1-25.png" alt="这是一张图片QwQ"><br>接下来重启并插入U盘，进入boot（上文有教程），选择你的U盘，如果看不到U盘名称，那么选择USB-HDD<br> <img src="/img/text/text1/1-26.jpeg" alt="这是一张图片QwQ"><br>接下来直接按回车进入PE系统<br> <img src="/img/text/text1/1-27.jpeg" alt="这是一张图片QwQ"><br>箭头所指工具均可用来安装系统，绿色箭头所指在上文中教过，我们这里讲解蓝色箭头所指的Ghost<br> <img src="/img/text/text1/1-28.jpeg" alt="这是一张图片QwQ"><br>需要注意的是，使用Ghost安装只支持gho镜像，下载时请注意，先选择镜像位置，再选择系统版本，勾选还原系统和完成后重启，选择你要安装到的硬盘，接下来点击恢复选择的分区，等待系统安装完成即可<br> <img src="/img/text/text1/1-29.jpeg" alt="这是一张图片QwQ"></p><p>至此，五种安装方法案全部结束</p><h2 id="附录：所需文件的下载地址"><a href="#附录：所需文件的下载地址" class="headerlink" title="附录：所需文件的下载地址"></a>附录：所需文件的下载地址</h2><p>3、4、5方案所需镜像文件下载网站（MSDN）<br><a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a><br>（该网站只提供原版软件，不提供破解与激活服务）</p><p>方案1、2微软官方工具下载<br>Windows 10下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a><br>Windows 11下载地址<br><a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p><p>方案3工具下载地址<br><a href="https://wwn.lanzouw.com/ir49x02cu9yd">https://wwn.lanzouw.com/ir49x02cu9yd</a><br>密码7240</p><p>方案4工具下载地址（Github）<br><a href="https://github.com/Chuyu-Team/Dism-Multi-language">https://github.com/Chuyu-Team/Dism-Multi-language</a></p><p>方案5工具下载地址<br><a href="https://www.wepe.com.cn/">https://www.wepe.com.cn/</a></p><p>需要激活工具的朋友到这里下载<br><a href="https://wwn.lanzouw.com/itbvZ02cuy5e">https://wwn.lanzouw.com/itbvZ02cuy5e</a><br>密码8w19</p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>（把酷安的结语稍微也改了改哈哈哈）<br>对于各位酷安大神和经常搞这些的发烧友来说，这篇教程可能水平不高，或者说根本没有水平😵写这篇文章的起因是网课期间陆续有三个同学找我给电脑装系统，说来之前也帮助过几名好友装系统，于是我当时就想写这么一篇文章来帮助新手和小白学会安装系统或者说激发一下对这方面的兴趣吧，高中网课抽时间写这玩意花了我前后三天想想也挺久的，不是建这网站还没翻出来这陈年旧贴呢哈哈哈。这文章在酷安挂了这么久应该多少也能帮到大家一些吧，那当初写这文章时间花的也挺值的，就写到这吧，估计也没啥人来看我的网站就是了，看了也不会评论罢（大概？）</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p><center>Destiny是一名喜欢二次元、数码、各类游戏和VOCALOID的脆皮大学生，目前就读于<a href="https://www.lnu.edu.cn/">辽宁大学</a>计算机类专业。</center><center><b>正在努力学习和苦练技术<del>（摆烂）</del>。</b></center></p></p><center>本人会在此网站上面记录自己的技术文档和学习生活日常，也可能会搬运一些本人发在酷安或其他平台的文章。</center></p><p><center>邮箱：1564932340@qq.com</center><center>酷安：四氯合铜离子</center></p><p><center><a href="https://destiny-blog.cn/comment-policy/">查看我们对您在本站发表评论做出的建议及要求</a></center></p><p><center>由于本站点使用Github托管，部分页面加载速度可能较为缓慢。</center><center>本站基于  Hexo  搭建</center><center>主题：Fluid</center></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>我们建议您作出友好的评论</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p><center> <big><b>您的评论务必遵守如下及中国或您所在国家的一切相关法律法规：</b></big></center><center><big><b>《中华人民共和国网络安全法》</b></big></center><center><big><b>《网络信息内容生态治理规定》</b></big></center><center><big><b>《互联网跟帖评论服务管理规定》</b></big></center></p><p><center>善语结善缘 恶语伤人心</center><center>本站鼓励用户表达个人观点的同时尊重他人观点，不引战、人身攻击、不诋毁、辱骂他人。</center><center>本站鼓励大家基于真实的信息表达观点，杜绝抄袭捏造，不造谣传谣，不有意误导和歪曲事实。</center><center>本站鼓励用户避免制造分裂和对立，交朋友而不是制造敌人。</center></p><p><center>感谢您的配合</center></p>]]></content>
    
  </entry>
  
  
  
</search>
